import{_ as t,h as o,l as a,u as n,O as e,x as l,m as p,f as r}from"./chunks/framework.DZazWmmr.js";const i="/assets/image.BnGosui8.png",c="/assets/image-1.XiqzJ4SE.png",d="/assets/image-2.OoPtTHR6.png",u="/assets/image-3.D3C63cle.png",h="/assets/image-4.DUG9ZsQh.png",J=JSON.parse('{"title":"NuxtJS：基于 VueJS 的全栈式框架，简明笔记","description":"","frontmatter":{"title":"NuxtJS：基于 VueJS 的全栈式框架，简明笔记","date":"2024-01-30T18:00:00.000Z"},"headers":[],"relativePath":"frontend/nuxtjs/index.md","filePath":"frontend/nuxtjs/index.md"}'),_={name:"frontend/nuxtjs/index.md"},x=e(`<p><a href="https://nuxt.com/" target="_blank" rel="noreferrer">NuxtJS</a> 是基于 VueJS 的全栈式框架，不仅支持 CSR/SSR/SSG/SWR/ISR 等渲染模式，还支持文件路由/自动导入/布局管理等额外功能。注意：<a href="https://nextjs.org/" target="_blank" rel="noreferrer">NextJS</a> 是基于 ReactJS 的全栈式框架，<a href="https://nestjs.com/" target="_blank" rel="noreferrer">NestJS</a> 是基于 NodeJS 的后端框架，切勿混淆。粗略翻过一遍官方文档，总结一些我比较关注的点。</p><h2 id="快速上手" tabindex="-1">快速上手 <a class="header-anchor" href="#快速上手" aria-label="Permalink to &quot;快速上手&quot;">​</a></h2><h3 id="创建项目" tabindex="-1">创建项目 <a class="header-anchor" href="#创建项目" aria-label="Permalink to &quot;创建项目&quot;">​</a></h3><p>Nuxi 是 Nuxt 提供的命令行工具，用来初始化项目，按如下操作快速上手：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#6A737D;"># 创建目录并拉取模板文件</span></span>
<span class="line"><span style="color:#6F42C1;">npx</span><span style="color:#032F62;"> nuxi@latest</span><span style="color:#032F62;"> init</span><span style="color:#032F62;"> nuxt-demo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 进入目录</span></span>
<span class="line"><span style="color:#005CC5;">cd</span><span style="color:#032F62;"> nuxt-demo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 安装依赖</span></span>
<span class="line"><span style="color:#6F42C1;">pnpm</span><span style="color:#032F62;"> install</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 启动开发并自动打开浏览器</span></span>
<span class="line"><span style="color:#6F42C1;">pnpm</span><span style="color:#032F62;"> dev</span><span style="color:#005CC5;"> --open</span></span></code></pre></div><h3 id="项目结构" tabindex="-1">项目结构 <a class="header-anchor" href="#项目结构" aria-label="Permalink to &quot;项目结构&quot;">​</a></h3><p>Nuxt 采用约定式的目录结构，特定目录会自动加载，先来看一眼官方推荐的目录结构：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#005CC5;">.</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#032F62;"> .nuxt</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#032F62;"> .output</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#032F62;"> assets</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#032F62;"> components</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#032F62;"> composables</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#032F62;"> content</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#032F62;"> layouts</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#032F62;"> middleware</span><span style="color:#6A737D;">       # Nuxt中间件</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#032F62;"> modules</span><span style="color:#6A737D;">          # Nuxt模块</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#032F62;"> node_modules</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#032F62;"> pages</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#032F62;"> plugins</span><span style="color:#6A737D;">          # Nuxt插件</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#032F62;"> public</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#032F62;"> server</span><span style="color:#6A737D;">           # 接口服务</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#032F62;"> utils</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#032F62;"> .env</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#032F62;"> .gitignore</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#032F62;"> .nuxtignore</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#032F62;"> app.config.ts</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#032F62;"> app.vue</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#032F62;"> error.vue</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#032F62;"> nuxt.config.ts</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#032F62;"> package.json</span></span>
<span class="line"><span style="color:#6F42C1;">└──</span><span style="color:#032F62;"> tsconfig.json</span></span></code></pre></div><p>当基于 Vite 打包时，Vite 的配置可以在 nuxt.config.ts 进行添加。此外，index.html 在 Nuxt 中不存在，但提供了很多方法添加/修改其中的标签；src 目录存在，采用扁平化的结构。</p><h2 id="渲染模式" tabindex="-1">渲染模式 <a class="header-anchor" href="#渲染模式" aria-label="Permalink to &quot;渲染模式&quot;">​</a></h2><p>渲染，主要指的是 HTML 的渲染，这关系到 SEO 收录和首屏加载等内容。随着前端框架的繁荣，如今已出现很多花里胡哨的渲染模式，这里简单了解下：</p><h3 id="csr" tabindex="-1">CSR <a class="header-anchor" href="#csr" aria-label="Permalink to &quot;CSR&quot;">​</a></h3><p>即 Client Side Render(客户端渲染)，HTML 在客户端动态生成，典型的就是 VueJS 单页面应用。如下：</p>`,13),y=a("h3",{id:"ssg",tabindex:"-1"},[l("SSG "),a("a",{class:"header-anchor",href:"#ssg","aria-label":'Permalink to "SSG"'},"​")],-1),S=a("p",null,"即 Server Side Generate(服务端生成)，HTML 在服务端已生成好，加载 JS 后会自动注水(Hydrate)，完成静态到动态的转换，典型的就是 Vitepres 静态应用。SSG 算是 SSR 的一种，即 HTML 不是在客户端生成的。",-1),m=a("h3",{id:"ssr",tabindex:"-1"},[l("SSR "),a("a",{class:"header-anchor",href:"#ssr","aria-label":'Permalink to "SSR"'},"​")],-1),b=a("p",null,"即 Server Side Render(服务端渲染)，HTML 在服务端动态生成，页面加载 JS 后自动注水，典型的就是官网首页等需要 SEO 的地方。",-1),g=e('<h3 id="swr" tabindex="-1">SWR <a class="header-anchor" href="#swr" aria-label="Permalink to &quot;SWR&quot;">​</a></h3><p>即 Stable-Whilte-Revalidate(返回过时内容同时重新生成)。实际上，这是一种缓存策略：设置一个缓存时间，用户首次访问时返回新内容，用户在缓存期访问时返回缓存，用户在缓存期后访问时返回缓存并在后台更新缓存，再下次访问时就可以获取到最新内容。</p><h3 id="isr" tabindex="-1">ISR <a class="header-anchor" href="#isr" aria-label="Permalink to &quot;ISR&quot;">​</a></h3><p>类似于 SWR，但可以配合 CDN 和边缘计算实现不错的缓存效果。目前只有少数云服务商支持，例如 vercel。此外，本地开发时是看不到效果的，需部署到 vercel 等平台才能看到效果。</p><p>在 NuxtJS 中，SSR 是默认的渲染模式，可以在 nuxt.config.ts 中通过 ssr: false 配置为 CSR 模式。此外，还可以指定部分页面使用 CSR 模式，部分页面使用 SSR 模式。</p><h2 id="运行环境" tabindex="-1">运行环境 <a class="header-anchor" href="#运行环境" aria-label="Permalink to &quot;运行环境&quot;">​</a></h2><p>从源码到浏览器代码，Nuxt 会在不同地方运行，在不同地方能使用的资源和可访问的环境也不同。已 SSR 为例，大体分类以下几种：</p><h3 id="构建端" tabindex="-1">构建端 <a class="header-anchor" href="#构建端" aria-label="Permalink to &quot;构建端&quot;">​</a></h3><p>执行源码转服务端代码的过程，可使用 Nuxt 模块参与过程。</p>',9),F=a("h3",{id:"服务端",tabindex:"-1"},[l("服务端 "),a("a",{class:"header-anchor",href:"#服务端","aria-label":'Permalink to "服务端"'},"​")],-1),f=a("p",null,"执行服务端代码，并生成客户端代码的过程，可使用 Nuxt 插件或 Nuxt 中间件参与过程。",-1),C=e('<h3 id="客户端" tabindex="-1">客户端 <a class="header-anchor" href="#客户端" aria-label="Permalink to &quot;客户端&quot;">​</a></h3><p>执行客户端代码，可使用 Nuxt 插件参与过程。</p><h2 id="开发区别" tabindex="-1">开发区别 <a class="header-anchor" href="#开发区别" aria-label="Permalink to &quot;开发区别&quot;">​</a></h2><p>在同样使用 vite 作为构建工具的情况下，Nuxt 要比 Vue 复杂得多，毕竟同时涉及服务端和客户端。正式开始前，了解开发模式上的一些区别：</p><h3 id="打包配置" tabindex="-1">打包配置 <a class="header-anchor" href="#打包配置" aria-label="Permalink to &quot;打包配置&quot;">​</a></h3><p>Vue:</p><ul><li>vite.config.ts</li></ul><p>Nuxt:</p><ul><li>nuxt.config.ts： 取代 vite.config.ts，但还可以在里面配置 vite。</li><li>app.config.ts：应用配置，通常在编译时使用</li></ul><h3 id="首页模板" tabindex="-1">首页模板 <a class="header-anchor" href="#首页模板" aria-label="Permalink to &quot;首页模板&quot;">​</a></h3><p>Vue：</p><ul><li>index.html</li></ul><p>Nuxt</p><ul><li>无，可使用 Nuxt 模块和其他方法修改</li></ul><h3 id="入口文件" tabindex="-1">入口文件 <a class="header-anchor" href="#入口文件" aria-label="Permalink to &quot;入口文件&quot;">​</a></h3><p>Vue：</p><ul><li>src/main.ts</li></ul><p>Nuxt：</p><ul><li>无，如果要修改 vue 实例，需要使用 Nuxt 插件</li></ul><h3 id="根组件" tabindex="-1">根组件 <a class="header-anchor" href="#根组件" aria-label="Permalink to &quot;根组件&quot;">​</a></h3><p>Vue：</p><ul><li>src/App.vue</li></ul><p>Nuxt:</p><ul><li>app.vue 这点到是没多大区别</li></ul><h3 id="构建命令" tabindex="-1">构建命令 <a class="header-anchor" href="#构建命令" aria-label="Permalink to &quot;构建命令&quot;">​</a></h3><p>Vue：</p><ul><li>vite build</li></ul><p>Nuxt：</p><ul><li>nuxt generate：SSG 模式，生成的是纯静态文件，丢到 nginx 就能跑</li><li>nuxt build：SSR 模式，生成的是 NodeJS 文件，需丢到 NodeJS 环境里跑</li></ul><h3 id="构建产物" tabindex="-1">构建产物 <a class="header-anchor" href="#构建产物" aria-label="Permalink to &quot;构建产物&quot;">​</a></h3><p>Vue：</p><ul><li>dist：纯静态</li></ul><p>Nuxt：</p><ul><li>.output 实际内容取决于 generate 还是 build 命令，</li></ul><h2 id="配置文件" tabindex="-1">配置文件 <a class="header-anchor" href="#配置文件" aria-label="Permalink to &quot;配置文件&quot;">​</a></h2><h3 id="环境变量" tabindex="-1">环境变量 <a class="header-anchor" href="#环境变量" aria-label="Permalink to &quot;环境变量&quot;">​</a></h3><p>环境变量，本事是 Vite 支持的，但 Nuxt 额外添加到 runtimeConfig 配置中</p><table><thead><tr><th>功能</th><th>runtimeConfig</th><th>app.config</th></tr></thead><tbody><tr><td>客户端是否可用</td><td>Hydrated</td><td>Bundled</td></tr><tr><td>包含环境变量</td><td>✅ Yes</td><td>❌ No</td></tr><tr><td>响应式</td><td>✅ Yes</td><td>✅ Yes</td></tr><tr><td>类型提示</td><td>✅ Partial</td><td>✅ Yes</td></tr><tr><td>每次请求都配置</td><td>❌ No</td><td>✅ Yes</td></tr><tr><td>热更新</td><td>❌ No</td><td>✅ Yes</td></tr><tr><td>支持复杂类型(如函数)</td><td>❌ No</td><td>✅ Yes</td></tr></tbody></table><p>总的来说，runtimeConfig 适用于 JSON 对象，appConfig 适用于 JS 对象。</p><h2 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h2><p>体验下来，Nuxt 是非常不错的全栈式框架，有很多优秀的改良。特别是打包后的 node_modules 目录，经过 treeshaking 和优化后，只有几 M 大小，令人非常惊喜。此外，发现不少与 serverless 相关的类库，例如 nitro 和 zod 等，不仅构建产物小，还与 vercel 等平台集成非常好。</p>',41);function N(q,P,k,v,R,T){const s=p("Image");return r(),o("div",null,[x,a("p",null,[n(s,{src:i,alt:"image",class:"cursor-pointer"})]),y,S,a("p",null,[n(s,{src:c,alt:"image",class:"cursor-pointer"})]),m,b,a("p",null,[n(s,{src:d,alt:"image",class:"cursor-pointer"})]),g,a("p",null,[n(s,{src:u,alt:"image",class:"cursor-pointer"})]),F,f,a("p",null,[n(s,{src:h,alt:"image",class:"cursor-pointer"})]),C])}const A=t(_,[["render",N]]);export{J as __pageData,A as default};
