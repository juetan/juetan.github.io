import{_ as s,o as a,c as n,W as l}from"./chunks/framework.d6d633f0.js";const E=JSON.parse('{"title":"浏览器对二进制内容的下载处理机制","description":"","frontmatter":{"title":"浏览器对二进制内容的下载处理机制","date":"2023-07-19T11:05:00.000Z"},"headers":[],"relativePath":"frontend/post-browser-download.md","filePath":"frontend/post-browser-download.md"}'),p={name:"frontend/post-browser-download.md"},o=l(`<p>从服务端下载内容是很常见的操作，例如从服务器下载一个 .exe 文件，一个 .zip 文件或 .png 文件等。但在浏览器进行下载，是有一点门道的，接下来从两个方面聊下如何在浏览器下载内容。</p><h2 id="利用浏览器进行下载" tabindex="-1">利用浏览器进行下载 <a class="header-anchor" href="#利用浏览器进行下载" aria-label="Permalink to &quot;利用浏览器进行下载&quot;">​</a></h2><p>这里的意思是指，不使用JS操作二进制数据，直接给让浏览器打开一个链接，利用浏览器的内置规则进行下载。例如，使用 <code>&lt;a&gt;</code> 标签打开一个 .zip 文件的链接，浏览器会弹出一个下载弹窗，代码如下：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">a</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;https://www.abc.com/abc.zip&quot;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">/</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>上面的代码可以正常工作，但换成 .png 文件的链接，就会直接在浏览器打开而不是下载，这是为啥呢？</p><h3 id="内容类型" tabindex="-1">内容类型 <a class="header-anchor" href="#内容类型" aria-label="Permalink to &quot;内容类型&quot;">​</a></h3><p>主要在于，对于一个链接是否打开还是下载，取决于浏览器对 <code>Content-Type</code> 响应头的识别，有点区别文件后缀的识别方式。当浏览器支持 <code>Content-Type</code> 对应的类型时，浏览器会直接打开，反之会弹窗下载让用户自行处理。</p><p>如果想让浏览器直接下载而非打开支持的类型，可不可以呢？也是可以的，但这里也分两种情况：</p><h3 id="文件链接同源" tabindex="-1">文件链接同源 <a class="header-anchor" href="#文件链接同源" aria-label="Permalink to &quot;文件链接同源&quot;">​</a></h3><p>同源指协议名，主机名和端口三个参数相同，使用 <code>location.origin</code> 可查看当前页的同源地址。</p><p>此时，可以指定 <code>&lt;a&gt;</code> 标签的 <code>download</code> 属性，让浏览器下载而不是打开，代码如下：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">a</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;https://www.abc.com/abc.png&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">download</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;ABC.png&quot;</span><span style="color:#24292E;"> &gt;下载&lt;/</span><span style="color:#22863A;">a</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="文件链接非同源" tabindex="-1">文件链接非同源 <a class="header-anchor" href="#文件链接非同源" aria-label="Permalink to &quot;文件链接非同源&quot;">​</a></h3><p>如果文件链接不同源可以从响应头下手，<code>Content-Disposition</code> 响应头可以让浏览器下载而不是打开，响应头如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-light"><code><span class="line"><span style="color:#24292e;">Content-Disposition: attachment;filename=xxx.png</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>其中，attchment 意为附件，意思是让浏览器当成附件下载，filename 可以指定保存的文件名，默认为原始文件的名字。</p><h2 id="使用代码下载" tabindex="-1">使用代码下载 <a class="header-anchor" href="#使用代码下载" aria-label="Permalink to &quot;使用代码下载&quot;">​</a></h2><p>除了让浏览器下载，还可以自己手动写代码生成二进制数据，再模拟一个 <code>&lt;a&gt;</code> 标签的行为进行下载。首先，要得到一段二进制数据。方式有很多种，这里简单介绍几个：</p><h3 id="从服务器获取" tabindex="-1">从服务器获取 <a class="header-anchor" href="#从服务器获取" aria-label="Permalink to &quot;从服务器获取&quot;">​</a></h3><p>利用 <code>fetch</code> 或 <code>xhr</code> 方法，我们可以获取到请求返回来的二进制数据，例如：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light"><code><span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getArrayBuffer</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">res</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;https://abc.com/abc.png&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">buffer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> res.</span><span style="color:#6F42C1;">arrayBuffer</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> buffer;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面得到的 ArrayBuffer 就是二进制数据，当然也可以通过 <code>res.blob()</code> 得到 Blob 数据，这也是二进制数据。</p><h3 id="代码生成二进制数据" tabindex="-1">代码生成二进制数据 <a class="header-anchor" href="#代码生成二进制数据" aria-label="Permalink to &quot;代码生成二进制数据&quot;">​</a></h3><p>可以从服务器获取 ArrayBuffer，也可以自己 new 一个，如下：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">buffer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArrayBuffer</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dataview</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Int8Array</span><span style="color:#24292E;">(buffer);</span></span>
<span class="line"><span style="color:#24292E;">dataview[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">255</span><span style="color:#24292E;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>上面，16 指数据大小，单位为字节(B)。buffer 不能直接操作，需要使用类型数组进行操作，这里于本文不太相关，可自行查阅。</p><h3 id="从页面元素获取" tabindex="-1">从页面元素获取 <a class="header-anchor" href="#从页面元素获取" aria-label="Permalink to &quot;从页面元素获取&quot;">​</a></h3><p>假如页面上有一个文件类型的输入框，当如果选择了一个文件时，我们是可以获取到文件数据的，代码如下：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">input</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;file&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onchange</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">onChange</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onChange</span><span style="color:#24292E;">(</span><span style="color:#E36209;">e</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">let</span><span style="color:#24292E;"> </span><span style="color:#E36209;">data</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">file</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e.target.files[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">reader</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileReader</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">reader</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">onLoad</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">e</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e.result</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">reader</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">readAsBlob</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">file</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>读取的数据类型为 Blob 类型。</p><h3 id="生成链接并下载" tabindex="-1">生成链接并下载 <a class="header-anchor" href="#生成链接并下载" aria-label="Permalink to &quot;生成链接并下载&quot;">​</a></h3><p>ArrayBuffer 不能直接下载，但可以转换成 Blob ：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">blob</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Blob</span><span style="color:#24292E;">([buffer]);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>有了 Blob，就可以生成一个下载链接：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">link</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">URL</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">createObjectURL</span><span style="color:#24292E;">(blob)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>有了下载链接，就可以模拟 <code>&lt;a&gt;</code> 标签的下载行为：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">download</span><span style="color:#24292E;">(</span><span style="color:#E36209;">blob</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">link</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">URL</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">createObjectURL</span><span style="color:#24292E;">(blob);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">a</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  a.href </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> link;</span></span>
<span class="line"><span style="color:#24292E;">  a.</span><span style="color:#6F42C1;">click</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">URL</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">revokeObjectURL</span><span style="color:#24292E;">(link);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>需要注意的是，使用 <code>URL.createObjectURL</code> 生成链接并使用完之后，要用 <code>URL.revoekeObjectURL</code> 进行撤销，否在该内容会一直留在内存中。</p><h2 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h2><p>以上，介绍了关于浏览器下载的内容。对于浏览器支持的格式，会直接在窗口中打开；对于不支持的格式，会直接弹窗进行下载。如果要下载浏览器支持格式的内容：同源可以指定 <code>&lt;a&gt;</code> 标签的 <code>download</code> 属性进行下载，不同源可以指定 <code>Content-Disposition</code> 响应头进行下载。</p>`,40),e=[o];function t(r,c,i,y,d,b){return a(),n("div",null,e)}const h=s(p,[["render",t]]);export{E as __pageData,h as default};
