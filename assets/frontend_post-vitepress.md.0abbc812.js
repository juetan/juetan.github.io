import{_ as o,I as e,c as t,k as s,M as a,W as p,a as l,o as c}from"./chunks/framework.7ce97047.js";const r="/assets/image-icon.a919120f.png",y="/assets/image-preview.373db507.png",i="/assets/image-alias.f99fcb5c.png",E="/assets/image-replace.d975321e.png",d="/assets/image-permission.242baa99.png",u="/assets/image-actions.67c8d48c.png",C="/assets/image-branch.7c7a5b60.png",g="/assets/image-site.1b88b2d2.png",G=JSON.parse('{"title":"改造vitepess作为个人博客","description":"","frontmatter":{"title":"改造vitepess作为个人博客","date":"2023-07-17T11:42:00.000Z"},"headers":[],"relativePath":"frontend/post-vitepress.md","filePath":"frontend/post-vitepress.md"}'),h={name:"frontend/post-vitepress.md"},b=p(`<p>作为一名程序员，写日记是常有的事，日常我都是写在有道云笔记里面。但最近搞了不少小工具，遇到不少问题并想记录下来，各种方案搜下来最终决定使用 Vitepress 以静态博客形式写日记。</p><h2 id="选择-vitepress" tabindex="-1">选择 Vitepress <a class="header-anchor" href="#选择-vitepress" aria-label="Permalink to &quot;选择 Vitepress&quot;">​</a></h2><p>在这之前，我是有一台 1 核 2G 的小水管服务器的，基于 Typecho 搭建了个博客，还购买了 Handsome 主题，但平常真的懒得上去加上经常遭到各种暴力入侵等原因，后来就慢慢闲置下来了。</p><p>为什么使用 Vitepress 呢，有以下几个原因：</p><ul><li>整体是 vite + vue 技术栈，写起来比较熟悉且没有 hexo 那么陌生</li><li>可以很方便地插入各种示例和 vue 组件，本质上是个 vue 项目</li><li>可以集成到 Github Action 里，只要提交就自动部署了</li></ul><p>但有好处也有问题，Vitepress 整体上是偏向文档风格的，改造成博客风格需要花费一番功夫。在改造过程中，遇到不少问题，但结果是比较满意的，以下是我的一些记录。</p><h2 id="初始化项目" tabindex="-1">初始化项目 <a class="header-anchor" href="#初始化项目" aria-label="Permalink to &quot;初始化项目&quot;">​</a></h2><p>这一步比较简单，可以跟着官方教程来，有些不一样的列在了下面。</p><ol><li>初始化，参数根据自己喜好选择就行</li></ol><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-light"><code><span class="line"><span style="color:#6F42C1;">npx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">vitepress</span><span style="color:#24292E;"> </span><span style="color:#032F62;">init</span></span></code></pre></div><ol start="2"><li>执行后会生成下面的目录结构</li></ol><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-light"><code><span class="line"><span style="color:#24292e;">- docs</span></span>
<span class="line"><span style="color:#24292e;">---.vitepress</span></span>
<span class="line"><span style="color:#24292e;">--- index.md</span></span></code></pre></div><ol start="3"><li>上面的目录形式，适合项目型文档，因此我改成了下面的目录结构。</li></ol><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-light"><code><span class="line"><span style="color:#24292e;">- docs</span></span>
<span class="line"><span style="color:#24292e;">---.vitepress</span></span>
<span class="line"><span style="color:#24292e;">--- index.md</span></span></code></pre></div><ol start="4"><li>目录结构改完之后，还要配置下 <code>.vitepress/config.ts</code> (如下)，其中 src 作为放置 .md 文件的目录，dist 作为打包后的目录，跟 vue 项目差不多的风格。</li></ol><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineConfig</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  srcDir: </span><span style="color:#032F62;">&#39;src&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  outDir: </span><span style="color:#032F62;">&#39;dist&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><h2 id="添加图标和原子类样式" tabindex="-1">添加图标和原子类样式 <a class="header-anchor" href="#添加图标和原子类样式" aria-label="Permalink to &quot;添加图标和原子类样式&quot;">​</a></h2><p>由于是个人博客且使用 markdown，使用原子类是比较方便的，这里使用 unocss 插件，而 unocss 本身支持图标的生成和按需打包。</p><ol><li>安装依赖，图标我使用的是 <a href="https://iconpark.oceanengine.com/official" target="_blank" rel="noreferrer">Iconpark</a>，可以 <a href="https://icon-sets.iconify.design/" target="_blank" rel="noreferrer">点击这里</a> 查看支持的图标集。</li></ol><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-light"><code><span class="line"><span style="color:#6F42C1;">pnpm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">unocss</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@iconify-json/icon-park-outline</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-D</span></span></code></pre></div><ol start="2"><li>配置 <code>.vitepress/config.ts</code> 中的 vite 配置项</li></ol><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Unocss </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;unocss/vite&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { presetUno, presetIcons } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;unocss&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineConfig</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  vite: {</span></span>
<span class="line"><span style="color:#24292E;">    plugins: [</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">Unocss</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">        content: {</span></span>
<span class="line"><span style="color:#24292E;">          pipeline: {</span></span>
<span class="line"><span style="color:#24292E;">            include: [</span><span style="color:#032F62;">/</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">(vue</span><span style="color:#D73A49;">|</span><span style="color:#032F62;">svelte</span><span style="color:#D73A49;">|</span><span style="color:#005CC5;">[jt]</span><span style="color:#032F62;">sx</span><span style="color:#D73A49;">|</span><span style="color:#032F62;">mdx</span><span style="color:#D73A49;">?|</span><span style="color:#032F62;">astro</span><span style="color:#D73A49;">|</span><span style="color:#032F62;">elm</span><span style="color:#D73A49;">|</span><span style="color:#032F62;">php</span><span style="color:#D73A49;">|</span><span style="color:#032F62;">phtml</span><span style="color:#D73A49;">|</span><span style="color:#032F62;">html</span><span style="color:#D73A49;">|</span><span style="color:#032F62;">ts)(</span><span style="color:#D73A49;">$|</span><span style="color:#22863A;font-weight:bold;">\\?</span><span style="color:#032F62;">)/</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">          },</span></span>
<span class="line"><span style="color:#24292E;">          filesystem: [</span><span style="color:#032F62;">&#39;.vitepress/config.ts&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        presets: [</span><span style="color:#6F42C1;">presetUno</span><span style="color:#24292E;">(), </span><span style="color:#6F42C1;">presetIcons</span><span style="color:#24292E;">()],</span></span>
<span class="line"><span style="color:#24292E;">      }),</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>需要注意的是，unocss 默认不支持 .ts 文件的扫描，因此要手动加上。且 <code>.vitepress/config.ts</code> 不在 vue 的构建流中，需要作为文件进行扫描。</p><ol start="3"><li>添加完后，就可以按这样使用了，只会打包使用的 css 类和图标类，非常银杏化。</li></ol><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">&lt;!-- css类 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;text-blue-500&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!-- 图标类 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">i</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;i-icon-park-outline-home&quot;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">/</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    首页</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><ol start="4"><li>最后贴一个图标的效果图</li></ol>`,26),m=p(`<h2 id="添加图片预览组件" tabindex="-1">添加图片预览组件 <a class="header-anchor" href="#添加图片预览组件" aria-label="Permalink to &quot;添加图片预览组件&quot;">​</a></h2><p>默认生成的页面中，图片是不能放大的，这不太符合我的需求。研究了一下文档，绕了一些弯路，最终找到了一个理想的方案。</p><ol><li>预览组件使用的是 Arco Design 的 <a href="https://arco.design/vue/component/image" target="_blank" rel="noreferrer">图片组件</a>，这是考虑后面其他地方也会用到这个组件库。</li></ol><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-light"><code><span class="line"><span style="color:#6F42C1;">pnpm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@arco-design/web-vue</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-D</span></span></code></pre></div><ol start="2"><li>在 <code>.vitepress/theme/index.ts</code> 中，注册为全局组件。</li></ol><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Image } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@arco-design/web-vue&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">enhanceApp</span><span style="color:#24292E;">({ </span><span style="color:#E36209;">app</span><span style="color:#24292E;">, </span><span style="color:#E36209;">router</span><span style="color:#24292E;">, </span><span style="color:#E36209;">siteData</span><span style="color:#24292E;"> }</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EnhanceAppContext</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    app.</span><span style="color:#6F42C1;">component</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Image&#39;</span><span style="color:#24292E;">, Image);</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><ol start="3"><li>在 <code>.vitepress/config.ts</code> 中，改造一下 markdown-it 的渲染规则。</li></ol><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineConfig</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  markdown: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">config</span><span style="color:#24292E;">(</span><span style="color:#E36209;">md</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      md.renderer.rules.</span><span style="color:#6F42C1;">image</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">tokens</span><span style="color:#24292E;">, </span><span style="color:#E36209;">idx</span><span style="color:#24292E;">, </span><span style="color:#E36209;">options</span><span style="color:#24292E;">, </span><span style="color:#E36209;">env</span><span style="color:#24292E;">, </span><span style="color:#E36209;">self</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">token</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tokens[idx];</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">aIndex</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> token.</span><span style="color:#6F42C1;">attrIndex</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;src&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">src</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> token.attrs</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">[aIndex][</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`&lt;Image src=&quot;\${</span><span style="color:#24292E;">src</span><span style="color:#032F62;">}&quot; class=&quot;cursor-pointer hover:shadow shadow-blue-100&quot;  /&gt;\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      };</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><ol start="4"><li>上面做完后，本地就可以跑起来了，但打包是有问题的。问题在于 vue 默认支持 img，video 等原生标签 src 静态引用的打包，而 Image 组件的 src 没有被打包。这个可以配置下 @vitejs/plugin-vue 插件，还是 <code>.vitepress/config.ts</code> 文件。</li></ol><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineConfig</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  vue: {</span></span>
<span class="line"><span style="color:#24292E;">    template: {</span></span>
<span class="line"><span style="color:#24292E;">      transformAssetUrls: {</span></span>
<span class="line"><span style="color:#24292E;">        Image: [</span><span style="color:#032F62;">&#39;src&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><ol start="5"><li>最终效果如下：</li></ol>`,11),A=s("h2",{id:"替换默认主题的部分组件",tabindex:"-1"},[l("替换默认主题的部分组件 "),s("a",{class:"header-anchor",href:"#替换默认主题的部分组件","aria-label":'Permalink to "替换默认主题的部分组件"'},"​")],-1),_=s("p",null,"我并没有从零开始写一个主题，而是基于默认主题修改，主要是大部分功能已经满足需求。而使用默认主题，难免有部分组件想要修改，这该怎么办呢？",-1),f=s("p",null,[l("官方提供有一个"),s("a",{href:"https://vitepress.dev/guide/extending-default-theme#overriding-internal-components",target:"_blank",rel:"noreferrer"},"解决方案"),l(", 通过设置别名进行替换。但试过之后，我发现包含有相对路径的引用就会报错，如下：")],-1),v=p(`<p>问题在于打包的时候，两个文件不在一个目录下，相对引用就会报错。这个也不是不能解决，可以自己写个 vite 插件，在加载的时候加载当前目录下的文件，这样路径就能保持了。</p><ol><li>在 <code>.vitepress/config.ts</code> 中写个简易插件。注意：带 ? 的是虚拟组件，需要过滤掉。</li></ol><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineConfig</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  vite: {</span></span>
<span class="line"><span style="color:#24292E;">    plugins: [</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        name: </span><span style="color:#032F62;">&#39;vite:pres&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">load</span><span style="color:#24292E;">(</span><span style="color:#E36209;">id</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">list</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;VPNavBarMenuLink.vue&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;VPDocOutlineItem.vue&#39;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">i</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fileURLToPath</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`./theme/override/\${</span><span style="color:#24292E;">i</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">import</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">meta</span><span style="color:#24292E;">.url));</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">item</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> list.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">((</span><span style="color:#E36209;">i</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> id.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(i) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">id.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;?&#39;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (item) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">path</span><span style="color:#24292E;">(item), </span><span style="color:#032F62;">&#39;utf-8&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><ol start="2"><li>下面贴一个示例，原来的页内导航是没有任何选中标记，我改造了一下加入了选中类。</li></ol>`,4),F=p(`<h2 id="自定义样式和一些风格偏好" tabindex="-1">自定义样式和一些风格偏好 <a class="header-anchor" href="#自定义样式和一些风格偏好" aria-label="Permalink to &quot;自定义样式和一些风格偏好&quot;">​</a></h2><p>样式替换还是比较方便的，跟着官方提供的示例进行改造即可，这里说几个风格偏好的点。</p><ul><li>自定义滚动条</li></ul><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-light"><code><span class="line"><span style="color:#6F42C1;">::-webkit-scrollbar</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">width</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">8</span><span style="color:#D73A49;">px</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">height</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">6</span><span style="color:#D73A49;">px</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">::-webkit-scrollbar-track</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">background</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">#f1f1f1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">::-webkit-scrollbar-thumb</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">background</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">#99999980</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">border-radius</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">4</span><span style="color:#D73A49;">px</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">::-webkit-scrollbar-thumb:hover</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">background</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">#55555580</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li>自定义选中样式</li></ul><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-light"><code><span class="line"><span style="color:#6F42C1;">::selection</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">background-color</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">var</span><span style="color:#24292E;">(</span><span style="color:#E36209;">--vp-c-brand</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">color</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">#fff</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li>自定义光标样式，可以在 <a href="https://zhutix.com/tag/cursors/" target="_blank" rel="noreferrer">致美化</a> 上面挑一套自己喜欢的光标主题。</li></ul><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-light"><code><span class="line"><span style="color:#22863A;">*</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">cursor</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">url</span><span style="color:#24292E;">(</span><span style="color:#E36209;">/cursor/Default.cur</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">auto</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#22863A;">img</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">cursor</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">url</span><span style="color:#24292E;">(</span><span style="color:#E36209;">/cursor/zoomin.cur</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">zoom-in</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#22863A;">a</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#22863A;">a</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#22863A;">*</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">cursor</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">url</span><span style="color:#24292E;">(</span><span style="color:#E36209;">/cursor/normal.cur</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">pointer</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li>自定义动画，可以在 <a href="https://animista.net/play/basic/scale-up" target="_blank" rel="noreferrer">Animista</a> 上面调试好直接复制下来。</li></ul><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-light"><code><span class="line"><span style="color:#6F42C1;">.fade-in-fwd</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">-webkit-animation</span><span style="color:#24292E;">: fade-in-fwd </span><span style="color:#005CC5;">0.6</span><span style="color:#D73A49;">s</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">cubic-bezier</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.39</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.575</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.565</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#005CC5;">both</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">animation</span><span style="color:#24292E;">: fade-in-fwd </span><span style="color:#005CC5;">0.6</span><span style="color:#D73A49;">s</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">cubic-bezier</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.39</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.575</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.565</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#005CC5;">both</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">@keyframes</span><span style="color:#24292E;"> </span><span style="color:#E36209;">slide-in-bottom</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">0%</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">transform</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">translateY</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#D73A49;">px</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">opacity</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">100%</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">transform</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">translateY</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">opacity</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="自动构建和部署在-github-上面" tabindex="-1">自动构建和部署在 GitHub 上面 <a class="header-anchor" href="#自动构建和部署在-github-上面" aria-label="Permalink to &quot;自动构建和部署在 GitHub 上面&quot;">​</a></h2><p>写静态博客的好处之一，就是可以白嫖部署服务(这里指的是 GitHub Action)，省去部署的时间。在 Github 中，如果你的仓库名是 &lt;username&gt;.github.io 格式，那么 master 分支下的内容会主动部署为静态网站，并可以通过 <code>https://&lt;username&gt;.github.io</code> 访问。</p><p>但日常操作中，我们的源码都在 master 分支，直接部署源码显然不对。此时，可以将打包后的内容放在别的分支，例如 gh-pages 分支。当然，这样做需要做额外的配置，但只需配置一次就行。</p><ol><li>新建 <code>.github/workflows/deploy.yml</code> 文件，写一个部署配置，这里用的是我以前使用的配置改过来的。</li></ol><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-light"><code><span class="line"><span style="color:#6A737D;"># 工作流名称，可自定义</span></span>
<span class="line"><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">自动部署</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 事件监听，决定什么时候触发该工作流内的任务</span></span>
<span class="line"><span style="color:#005CC5;">on</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 在master分支推动到github时触发</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">push</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">branches</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">master</span><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 任务集合，可包含多个任务</span></span>
<span class="line"><span style="color:#22863A;">jobs</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 任务名称</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">build</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 运行的操作系统</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">runs-on</span><span style="color:#24292E;">: </span><span style="color:#032F62;">ubuntu-latest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 步骤集合，可包含多个步骤</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">steps</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;"># 单个步骤，没有名称，直接使用一个action</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#22863A;">uses</span><span style="color:#24292E;">: </span><span style="color:#032F62;">actions/checkout@v2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;"># 单个步骤，带有名称，带有参数</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">build and deploy</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">run</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">|</span></span>
<span class="line"><span style="color:#032F62;">          npm install</span></span>
<span class="line"><span style="color:#032F62;">          npm run build</span></span>
<span class="line"><span style="color:#032F62;">          cd dist</span></span>
<span class="line"><span style="color:#032F62;">          git config --global user.name &quot;juetan&quot;</span></span>
<span class="line"><span style="color:#032F62;">          git config --global user.email &quot;810335188@qq.com&quot;</span></span>
<span class="line"><span style="color:#032F62;">          git init</span></span>
<span class="line"><span style="color:#032F62;">          git add -A</span></span>
<span class="line"><span style="color:#032F62;">          git commit -m &quot;自动构建和部署(Github Action)&quot;</span></span>
<span class="line"><span style="color:#032F62;">          git push -f &quot;https://\${{ github.actor }}:\${{ secrets.GITHUB_TOKEN }}@github.com/\${{ github.repository }}.git&quot; master:gh-pages</span></span></code></pre></div><p>大致内容是，当有提交推送到 master 分支时，在一个 Ubuntu 系统进行安装依赖和打包，再把 dist 目录下的内容，推送到 gh-pages 分支。</p><ol start="2"><li>上面的推送有可能失败，因为 <code>secrets.GITHUB_TOKEN</code> 是需要权限才能使用的，可以更改为如下的配置：</li></ol>`,17),D=s("ol",{start:"3"},[s("li",null,"写完配置就可以这个推送了，可以在这里看到运行状态。")],-1),k=s("ol",{start:"4"},[s("li",null,"构建后应该能看到多出来一个 gh-pages 分支，此时还需要配置该分支作为部署分支即可。")],-1),x=s("ol",{start:"5"},[s("li",null,"通常需要等待一会才生效，下面贴一张部署完的页面效果图。")],-1),T=s("h2",{id:"最后",tabindex:"-1"},[l("最后 "),s("a",{class:"header-anchor",href:"#最后","aria-label":'Permalink to "最后"'},"​")],-1),q=s("p",null,"以上，想到什么写什么，可能存在遗漏或描述不全，后面根据情况在详细补充。",-1);function I(w,P,V,S,N,U){const n=e("Image");return c(),t("div",null,[b,s("p",null,[a(n,{src:r,class:"cursor-pointer"})]),m,s("p",null,[a(n,{src:y,class:"cursor-pointer"})]),A,_,f,s("p",null,[a(n,{src:i,class:"cursor-pointer"})]),v,s("p",null,[a(n,{src:E,class:"cursor-pointer"})]),F,s("p",null,[a(n,{src:d,class:"cursor-pointer"})]),D,s("p",null,[a(n,{src:u,class:"cursor-pointer"})]),k,s("p",null,[a(n,{src:C,class:"cursor-pointer"})]),x,s("p",null,[a(n,{src:g,class:"cursor-pointer"})]),T,q])}const B=o(h,[["render",I]]);export{G as __pageData,B as default};
