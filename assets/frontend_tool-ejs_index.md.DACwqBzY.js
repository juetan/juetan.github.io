import{_ as t,h as e,l as s,u as p,x as a,M as o,O as n,m as c,f as r}from"./chunks/framework.DZazWmmr.js";const y="/assets/image-onecompiler.DVTVGWId.png",f=JSON.parse('{"title":"使用 EJS 生成代码提升开发效率","description":"测试","frontmatter":{"title":"使用 EJS 生成代码提升开发效率","description":"测试","date":"2023-07-13T00:00:00.000Z","tags":"前端"},"headers":[],"relativePath":"frontend/tool-ejs/index.md","filePath":"frontend/tool-ejs/index.md"}'),i={name:"frontend/tool-ejs/index.md"},d=n(`<p><a href="https://ejs.bootcss.com/" target="_blank" rel="noreferrer">EJS</a> 是一个 JavaScript 模板引擎，名字中的 E 可以指 Embedded(可嵌入)、Effective(高效)、Elegant(优雅) 或者是 Easy(简单)。 在如今的前端开发中，EJS 比不上 Vue 或 React 等框架强大，但在辅助开发方面还是有用处的。话不多说，接下来以一个例子来感受下。</p><h2 id="例子" tabindex="-1">例子 <a class="header-anchor" href="#例子" aria-label="Permalink to &quot;例子&quot;">​</a></h2><p>在日常开发中，有时候会遇到后端有一些枚举字典的定义，前端也要进行相应的配置。例如在做权限功能时，后端给了我们下面的权限码数据:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#24292E;">[</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#005CC5;">    &quot;id&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#005CC5;">    &quot;code&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;access:readAbc&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#005CC5;">    &quot;authName&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;读取权限&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#005CC5;">    &quot;level&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#005CC5;">    &quot;id&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#005CC5;">    &quot;code&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;access:writeAbc&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#005CC5;">    &quot;authName&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;写入权限&quot;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">  ...</span></span>
<span class="line"><span style="color:#24292E;">]</span></span></code></pre></div><p>我们需要把他做成枚举的形式, 也就是下面的形式：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 权限码</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> const</span><span style="color:#D73A49;"> enum</span><span style="color:#6F42C1;"> AuthEnum</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * 读取权限</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#005CC5;">  ReadAbc</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &quot;access:readAbc&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * 写入权限</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#005CC5;">  WriteAbc</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &quot;access:writeAbc&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>那么如何从这项无聊的工作中解放出来呢，这可以使用 EJS 的模板生成能力。</p><h2 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h2><p>先来看下如何快速得到我们的目标代码。</p><ol><li>打开一个能编译 EJS 的在线网站， 例如 <a href="https://onecompiler.com/ejs" target="_blank" rel="noreferrer">OneCompiler</a>。</li></ol>`,10),E=n(`<ol start="2"><li>根据目标数据结构，编写一丢丢逻辑和模板代码，点击 <code>RUN</code> 按钮即可。</li></ol><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">&lt;%</span></span>
<span class="line"><span style="color:#D73A49;"> let</span><span style="color:#24292E;"> items </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#032F62;">    &quot;id&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#032F62;">    &quot;code&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;access:readAbc&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#032F62;">    &quot;authName&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;读取权限&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#032F62;">    &quot;id&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#032F62;">    &quot;code&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;access:writeAbc&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#032F62;">    &quot;authName&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;写入权限&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;"> ]</span></span>
<span class="line"><span style="color:#24292E;"> items </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> items.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(</span><span style="color:#E36209;">item</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">   let</span><span style="color:#24292E;"> key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> item.code.</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">   key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> key.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> key.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">   return</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">item, key }</span></span>
<span class="line"><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#D73A49;">-%&gt;</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 权限码</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> const</span><span style="color:#D73A49;"> enum</span><span style="color:#6F42C1;"> DaEnum</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  &lt;% </span><span style="color:#005CC5;">items</span><span style="color:#24292E;">.forEach((i, </span><span style="color:#005CC5;">index</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { -%&gt;</span></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * &lt;%= i.authName %&gt;</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  &lt;%= i.key %&gt; = </span><span style="color:#032F62;">&#39;&lt;%= i.code %&gt;&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  &lt;%_ }) -%&gt;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="ejs-语法" tabindex="-1">EJS 语法 <a class="header-anchor" href="#ejs-语法" aria-label="Permalink to &quot;EJS 语法&quot;">​</a></h2><p>上面涉及 EJS 的一些语法，我们来简单了解下。&lt;%= name %&gt; 是 EJS 的模板语法，用于执行 JS 代码并输出字符串(部分标签有该功能，看下面)。其中，&lt;% 表示执行一段代码的开始，可以带有修饰符执行特殊功能，包括:</p><table><thead><tr><th style="text-align:center;">标签</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;">&lt;%</td><td>只执行代码，不包含任何输出</td></tr><tr><td style="text-align:center;">&lt;%=</td><td>执行表达式，并输出转义后的内容到模板中。转义指对 HTML 标签进行转义，例如 <code>&lt;%= &#39;&lt;div&gt;ABC&lt;/div&gt;&#39; %&gt;</code> 将输出 <code>&amp;lt;div&amp;gt;ABC&amp;lt;/div&amp;gt;</code></td></tr><tr><td style="text-align:center;">&lt;%-</td><td>同上，但不进行转义。</td></tr><tr><td style="text-align:center;">&lt;%_</td><td>类似于 <code>&lt;%</code> , 但会删除前面的空格，例如 <code> &lt;%_ 123 %&gt;</code>， <code>&lt;%_</code> 前面有 2 个空格但不会输出，上面第 29 行就用到了这个标签</td></tr><tr><td style="text-align:center;">&lt;%#</td><td>注释，后面的内容将会当成注释处理。与 <code>&lt;!-- ABC --&gt;</code> 相比，前者不会输出任何内容，后者会保留输出。</td></tr><tr><td style="text-align:center;">&lt;%%</td><td>输出字符串 <code>&lt;%</code></td></tr></tbody></table><p>而 %&gt; 表示一段代码的结束，同样可以带有修饰符表示特殊功能，包括：</p><table><thead><tr><th style="text-align:center;">标签</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;">%&gt;</td><td>普通的结束标签，没什么特殊功能</td></tr><tr><td style="text-align:center;">-%&gt;</td><td>删除随后的换行符，比较常用的是纯执行的代码块。例如，在上面的第 19/24/29 行 代码中我们就用到了这个标签，不然那里都会有一个空行。</td></tr><tr><td style="text-align:center;">_%&gt;</td><td>删除后面的空格符，例如 <code>&lt;%= &#39;ABC&#39; _%&gt; </code>，<code>_%&gt;</code> 后面有 2 个空格但不会输出。</td></tr></tbody></table><p>此外，任何在 &lt;% 和 %&gt; 标签之外的内容都将会原样输出，更多语法可以参考官方文档。</p><h2 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h2>`,9),u=s("a",{href:"https://handlebarsjs.com/zh/",target:"_blank",rel:"noreferrer"},"HandleBars",-1),h=s("a",{href:"https://github.com/release-it/release-it",target:"_blank",rel:"noreferrer"},"release-it",-1);function g(C,_,A,q,m,D){const l=c("Image");return r(),e("div",null,[d,s("p",null,[p(l,{src:y,alt:"image",class:"cursor-pointer"})]),E,s("p",null,[a("以上这是一个简单的例子，更多用途需要你结合实际多多思考，用好了提效效果明显。除了 EJS，"),u,a(" 也是一个很流行的 JS 模板引擎，它使用 "),s("code",null,o(),1),a("语法，对 vue 等框架的用户比较友好。这类模板引擎，在命令行工具进行页面模板的生成方面可能用得比较多，例如 "),h,a(" 就使用 HandleBars 定义 CHANGELOG 的生成模板。")])])}const x=t(i,[["render",g]]);export{f as __pageData,x as default};
