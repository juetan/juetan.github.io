import{_ as a,E as l,o as p,c as e,k as o,J as r,S as s}from"./chunks/framework.doOmauVw.js";const c="/assets/image.gEOaSscu.png",h=JSON.parse('{"title":"Go语言：注释、变量、常量、简单类型和复杂类型","description":"","frontmatter":{"title":"Go语言：注释、变量、常量、简单类型和复杂类型","date":"2023-09-07T19:17:00.000Z","thumbnail":"/assets/golang.jpg"},"headers":[],"relativePath":"go/02.var/index.md","filePath":"go/02.var/index.md"}'),t={name:"go/02.var/index.md"},i=s(`<p>Go 语言的创建者也是 C 语言的创建者之一，因此不少语法都有 C 语言语法的影子。例如，程序入口为 main 函数，函数 printf 命名，注释使用 // 开头等。此外，GO 语言也有自己的特殊语法，例如使用 := 声明短变量，函数支持多返回值，公有函数首字母大写等。</p><h2 id="注释" tabindex="-1">注释 <a class="header-anchor" href="#注释" aria-label="Permalink to &quot;注释&quot;">​</a></h2><p>Go 使用 C 语言风格的注释，其中单行注释使用双斜杠开头，如下：</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#6A737D;">// 单行注释</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;juetan&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>多行注释使用斜杠和星号开头，如下：</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">* 多行注释</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;juetan&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h2><p>变量，变指可以改变，量指作用域(在 Go 中作用域只有函数作用域和全局作用域)，语法如下：</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> &lt;name</span><span style="color:#D73A49;">&gt;</span><span style="color:#D73A49;"> &lt;</span><span style="color:#24292E;">type</span><span style="color:#D73A49;">&gt;</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> &lt;</span><span style="color:#24292E;">value</span><span style="color:#D73A49;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>其中，变量类型和初始值至少提供一个即可。当只提供类型时，默认值为零值(字符串的零值为 &quot;&quot;，整型的零值为 0，布尔的零值为 false)。如下：</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">;                     </span><span style="color:#6A737D;">// 提供类型，初始值值为：&quot;&quot;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> age </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 18</span><span style="color:#24292E;">;                        </span><span style="color:#6A737D;">// 提供初始值，类型推导为 int</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> email </span><span style="color:#D73A49;">string</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &quot;1@exmple.com&quot;</span><span style="color:#24292E;">;   </span><span style="color:#6A737D;">// 同时提供</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>变量声明可以分组，使用圆括号包裹声明内容，等号左边是变量名和类型，多个变量名以逗号隔开，可同时为多个变量指定同一类型，等号右边是变量值，多个变量值以逗号隔开，如下：</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> ( x, y </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> );        </span><span style="color:#6A737D;">// 同类型</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> (z, z1 </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">);    </span><span style="color:#6A737D;">// 带默认值</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>在函数内部，可使用 name := value 语法声明短变量，因而 var 常用于声明全局变量，而 := 用于声明函数内的变量，同时声明多个短变量时可覆盖同名变量，但至少得有一个新变量，如下：</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#24292E;">in, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> os.</span><span style="color:#005CC5;">Open</span><span style="color:#24292E;">(infile)</span></span>
<span class="line"><span style="color:#24292E;">out, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> os.</span><span style="color:#005CC5;">Create</span><span style="color:#24292E;">(outfile) </span><span style="color:#6A737D;">// out 是新变量，err 覆盖前面的同名变量</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>_ 是一个特殊变量，任何赋予它的值都会被丢弃。</p><h2 id="常量" tabindex="-1">常量 <a class="header-anchor" href="#常量" aria-label="Permalink to &quot;常量&quot;">​</a></h2><p>常量，常指禁止改变，量指作用域(同变量)，语法如下：</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#D73A49;"> &lt;</span><span style="color:#24292E;">name</span><span style="color:#D73A49;">&gt;</span><span style="color:#D73A49;"> &lt;</span><span style="color:#24292E;">type</span><span style="color:#D73A49;">&gt;</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> &lt;</span><span style="color:#24292E;">value</span><span style="color:#D73A49;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>以上，语法类似于变量，但名字通常大写，值必须指定，类型可以忽略(编译器推断)，通常用于固定值的声明，示例如下：</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> PI </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 3.131492654</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> (                   </span><span style="color:#6A737D;">// 分组</span></span>
<span class="line"><span style="color:#24292E;">  x uint16 </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 100</span></span>
<span class="line"><span style="color:#24292E;">  y                       </span><span style="color:#6A737D;">// y 和 x 相等</span></span>
<span class="line"><span style="color:#24292E;">  z </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 10</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>iota 是一个特殊的关键字，在常量表达式中使用会自动递增，如下：</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">  MAN </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> iota</span><span style="color:#6A737D;">      // 0</span></span>
<span class="line"><span style="color:#24292E;">  FAMA            </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#24292E;">  UNKNOWN         </span><span style="color:#6A737D;">// 2</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="简单类型" tabindex="-1">简单类型 <a class="header-anchor" href="#简单类型" aria-label="Permalink to &quot;简单类型&quot;">​</a></h2><p>简单变量，指的是存储在栈结构上，长度相对固定且占用内存不大的数据结构，例如字符串、数字和布尔等数据类型。简单变量是基础，复杂变量如数组等也是由这些类型封装而成的。</p><h3 id="字符串" tabindex="-1">字符串 <a class="header-anchor" href="#字符串" aria-label="Permalink to &quot;字符串&quot;">​</a></h3><p>使用单引号(<code>&#39;</code>)进行声明字符，使用双引号(<code>&quot;</code>)或反引号(\`\`\`)声明字符串，使用双引号会处理字符串中的转义符，而反引号会原样输出，此外反引号还可以声明多行字符串。</p><div class="language-Go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Go</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> s1 </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;hello, </span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;"> world&quot;</span><span style="color:#6A737D;">  // \\n 会转译为换行符</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> s2 </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> \`hello, \\n world\`</span><span style="color:#6A737D;">  // 原样输出</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> s3 </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> \`行1</span></span>
<span class="line"><span style="color:#032F62;">行2</span></span>
<span class="line"><span style="color:#032F62;">\`</span><span style="color:#6A737D;">                           // 多行字符串</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>输出如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-light vp-code"><code><span class="line"><span>hello,</span></span>
<span class="line"><span> world</span></span>
<span class="line"><span>hello, \\n world</span></span>
<span class="line"><span>行1</span></span>
<span class="line"><span>        行2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="整型" tabindex="-1">整型 <a class="header-anchor" href="#整型" aria-label="Permalink to &quot;整型&quot;">​</a></h3><p>整型，分为 无符号(uint) 和 有符号(int) 两种。其中，符号指的是正负符号，无符号不包含负数，而有符号类型包含负数，u 是 unsinged 的简写，int 是 integer 的简写，示例如下：</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">int8</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> 1</span><span style="color:#6A737D;">      // 有符号8位，范围：-128 ~ 127</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> y </span><span style="color:#D73A49;">uint8</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> -</span><span style="color:#005CC5;">1</span><span style="color:#6A737D;">    // 无符号8位，范围：0 ~ 255</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>长度有 8、16、32、64 和 int 五种，其中 int 取决于操作系统，在 32 位操作系统上 int 长度为 32，在 64 位操作系统上 int 长度为 64。两两组合，共有如下类型：</p><table><thead><tr><th>符号</th><th>8 位</th><th>16 位</th><th>32 位</th><th>64 位</th><th>系统位</th></tr></thead><tbody><tr><td>有符号</td><td>int8</td><td>int16</td><td>int32(rune)</td><td>int64</td><td>int</td></tr><tr><td>无符号</td><td>uint8(byte)</td><td>uint16</td><td>uint32</td><td>uint64</td><td>uint</td></tr></tbody></table><h3 id="浮点型" tabindex="-1">浮点型 <a class="header-anchor" href="#浮点型" aria-label="Permalink to &quot;浮点型&quot;">​</a></h3><p>浮点型，分为 float32(单精度) 和 float64(双精度) 两种，浮点数都是有符号的。其中，点指的是小数点，浮点指小数点的位置是浮动的。示例如下：</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">float32</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> 0.1</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> y </span><span style="color:#D73A49;">float64</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> 0.1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="布尔型" tabindex="-1">布尔型 <a class="header-anchor" href="#布尔型" aria-label="Permalink to &quot;布尔型&quot;">​</a></h3><p>包含两个值：true(真) 和 false(假)，示例如下：</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> t </span><span style="color:#D73A49;">bool</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> true</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> f </span><span style="color:#D73A49;">bool</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="复杂变量" tabindex="-1">复杂变量 <a class="header-anchor" href="#复杂变量" aria-label="Permalink to &quot;复杂变量&quot;">​</a></h2><h3 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-label="Permalink to &quot;数组&quot;">​</a></h3><p>语法如下：</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> &lt;name</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">length</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">type</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">{</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">index</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">:</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">init</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">value</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>其中 length 可以指定为 ... 表示长度根据后面的初始值声明进行推断；cap 方法用于获取数组的容量，len 方法用于定义数组的长度，如下：</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a1 [</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">a1[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">a1[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 2</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">cap</span><span style="color:#24292E;">(a1));</span></span>
<span class="line"><span style="color:#24292E;">fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(a1));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>除了可以使用 for index 遍历数组，也可以使用迭代器进行遍历，如下：</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> index, value </span><span style="color:#D73A49;">:=</span><span style="color:#D73A49;"> range</span><span style="color:#24292E;"> a2 {</span></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(index, value)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 结果：</span></span>
<span class="line"><span style="color:#6A737D;">// 0 0</span></span>
<span class="line"><span style="color:#6A737D;">// 1 3</span></span>
<span class="line"><span style="color:#6A737D;">// 2 0</span></span>
<span class="line"><span style="color:#6A737D;">// 3 0</span></span>
<span class="line"><span style="color:#6A737D;">// 4 6</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="切片" tabindex="-1">切片 <a class="header-anchor" href="#切片" aria-label="Permalink to &quot;切片&quot;">​</a></h3><p>切片与数组类似，区别在于数组是定长的，切片是变长的，因此在数组长度的语法上不指定长度接口，如下：</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> s1 []init            </span><span style="color:#6A737D;">// 空切片</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> s2 </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> make</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 长度为3，容量为5的切片</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">s3 </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> arr[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>备注：new 和 make 都是用于创建和初始化对象的内置函数，区别如下：new 用于各种类型的内存分配，将其初始化为零值返回内存指针；make用于内建类型的分配(map/slice/channel)，(make(type, len, cap)) 返回已初始化的值。</p><blockquote><p>值类型：string int float boolean array struct; 引用类型：slice map chan pointer</p></blockquote><h3 id="map" tabindex="-1">map <a class="header-anchor" href="#map" aria-label="Permalink to &quot;map&quot;">​</a></h3><p>语法：</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#6A737D;">// 方式1：不能直接使用，默认为nil</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> m1 </span><span style="color:#D73A49;">map</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (m1 </span><span style="color:#D73A49;">==</span><span style="color:#005CC5;"> nil</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  m1 </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> make</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">map</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 方式2</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> m2 </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> make</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">map</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>使用迭代器进行遍历，但顺序无法保证，如下：</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> m1 </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> make</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">map</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">m1[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;A&quot;</span></span>
<span class="line"><span style="color:#24292E;">m2[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;B&quot;</span></span>
<span class="line"><span style="color:#24292E;">m3[</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;C&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> key, value </span><span style="color:#D73A49;">:=</span><span style="color:#D73A49;"> range</span><span style="color:#24292E;"> m1 {</span></span>
<span class="line"><span style="color:#24292E;">  fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(key, value)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>map 不是并发安全的，因此 Go 在 v1.9 版本推出并发安全的 sync.Map，如下：</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> m1 sync.Map</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">m1.</span><span style="color:#005CC5;">Store</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;A&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">97</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">m1.</span><span style="color:#005CC5;">Load</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;A&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">m1.</span><span style="color:#005CC5;">Delete</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;A&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">m1.</span><span style="color:#005CC5;">Range</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">func</span><span style="color:#24292E;">(k, v </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;">{}) </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(k, v)</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#005CC5;"> true</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-label="Permalink to &quot;函数&quot;">​</a></h3><p>函数，需要声明好参数类型和返回值类型，且与其他语言不一样的是，Go 的函数支持多返回值，语法如下：</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#D73A49;"> &lt;</span><span style="color:#24292E;">name</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">name</span><span style="color:#D73A49;">&gt;</span><span style="color:#D73A49;"> &lt;</span><span style="color:#24292E;">type</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">) (</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">name</span><span style="color:#D73A49;">&gt;</span><span style="color:#D73A49;"> &lt;</span><span style="color:#24292E;">type</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">  // 函数体</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>返回声明中的名字可以在函数体中使用，如下：</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#6F42C1;"> SumAndProduct</span><span style="color:#24292E;">(A, B </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) (add </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">, Multiplied </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	add </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">B</span></span>
<span class="line"><span style="color:#24292E;">	Multiplied </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">B</span></span>
<span class="line"><span style="color:#D73A49;">	return</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>参数支持可变参数，如下：</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#6F42C1;"> print</span><span style="color:#24292E;">(c </span><span style="color:#D73A49;">...</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  for</span><span style="color:#24292E;"> k,v </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> range</span><span style="color:#24292E;"> c {</span></span>
<span class="line"><span style="color:#24292E;">    fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(v)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>参数默认是按值传递，无论是简单变量还是复杂变量都会复制一份。 如果要修改原值，需要传递指针类型的变量，如下：</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#6F42C1;"> P</span><span style="color:#D73A49;"> struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	age </span><span style="color:#D73A49;">int</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> P{age: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#6F42C1;"> increaseAge</span><span style="color:#24292E;">(p P) P {</span></span>
<span class="line"><span style="color:#24292E;">	p.age </span><span style="color:#D73A49;">+=</span><span style="color:#005CC5;"> 1</span></span>
<span class="line"><span style="color:#D73A49;">	return</span><span style="color:#24292E;"> p</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#6F42C1;"> main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;age: %i&quot;</span><span style="color:#24292E;">, p.age)         </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#24292E;">	p1 </span><span style="color:#D73A49;">:=</span><span style="color:#005CC5;"> increaseAge</span><span style="color:#24292E;">(p)</span></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;p age: %i&quot;</span><span style="color:#24292E;">, p.age)       </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;p1 age: %i&quot;</span><span style="color:#24292E;">, p1.age)     </span><span style="color:#6A737D;">// 2</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>函数可以延迟执行，使用 defer 会在在函数结束时逆序执行，如下：</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#6F42C1;"> ReadWrite</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	file.</span><span style="color:#005CC5;">Open</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;file&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">	defer</span><span style="color:#24292E;"> file.</span><span style="color:#005CC5;">Close</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">	if</span><span style="color:#24292E;"> A {</span></span>
<span class="line"><span style="color:#D73A49;">		return</span><span style="color:#005CC5;"> false</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">	if</span><span style="color:#24292E;"> B {</span></span>
<span class="line"><span style="color:#D73A49;">		return</span><span style="color:#005CC5;"> false</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">	return</span><span style="color:#005CC5;"> true</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>函数也是变量，可以作为参数传递，如下：</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#6F42C1;"> add</span><span style="color:#D73A49;"> func</span><span style="color:#24292E;"> (x </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">, y </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">int</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#6F42C1;"> run</span><span style="color:#24292E;">(fn add) </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#005CC5;"> fn</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在 Go 中，异常是返回值的一部分，当发生未处理的异常时，会触发 panic 中断程序退出，panic 可以使用 recover 拦截，但必须在defer函数中使用，如下：</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#6F42C1;"> throwsPanic</span><span style="color:#24292E;">(f </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">()) (b </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">	defer</span><span style="color:#D73A49;"> func</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">		if</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">:=</span><span style="color:#005CC5;"> recover</span><span style="color:#24292E;">(); x </span><span style="color:#D73A49;">!=</span><span style="color:#005CC5;"> nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			b </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> true</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}()</span></span>
<span class="line"><span style="color:#005CC5;">	f</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">//执行函数f，如果f中出现了panic，那么就可以恢复回来</span></span>
<span class="line"><span style="color:#D73A49;">	return</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Go里面有两个保留的函数：init函数（能够应用于所有的package）和main函数（只能应用于package main）。程序的初始化和执行都起始于main包。如果main包还导入了其它的包，那么就会在编译时将它们依次导入。如下：</p>`,77),y=s(`<h3 id="指针" tabindex="-1">指针 <a class="header-anchor" href="#指针" aria-label="Permalink to &quot;指针&quot;">​</a></h3><p>指针，是一种特殊变量，保存的是普通变量的内存地址。使用 &amp; 获取变量的地址，使用 * 获取指针变量指向地址的值，示例如下：</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> s1 </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;字符串&quot;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> s2 </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> &amp;</span><span style="color:#24292E;">s1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">s2)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="结构体" tabindex="-1">结构体 <a class="header-anchor" href="#结构体" aria-label="Permalink to &quot;结构体&quot;">​</a></h3><p>结构体类似于类，有属性和方法，属性一开始就在结构体中声明，但方法需要单独声明。使用结构体，先声明好类型，然后再实例化(没有 new)，示例如下：</p><p>语法：</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#6A737D;">// 1. 声明属性类型</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#6F42C1;"> Persion</span><span style="color:#D73A49;"> struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  Name </span><span style="color:#D73A49;">string</span><span style="color:#032F62;"> \`json: &quot;name&quot;\`</span></span>
<span class="line"><span style="color:#24292E;">  Age  </span><span style="color:#D73A49;">int</span><span style="color:#032F62;">    \`json: &quot;age&quot;\`</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 2. 实例化</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> p2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Persion {</span></span>
<span class="line"><span style="color:#24292E;">  Name: </span><span style="color:#032F62;">&quot;A&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  Age: </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>以上，第 1 步的声明语法有些奇怪，要分成两部分理解：type 是一个用于声明的关键字(类似于 var 和 const)，语法为 <code>type &lt;alias&gt; &lt;name&gt;</code>。</p><p>标签(tag)</p><p>匿名字段，即只提供类型，不提供字段名。当匿名字段是一个struct的时候，那么这个struct所拥有的全部字段都被隐式地引入当前struct。如下：</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#6F42C1;"> Human</span><span style="color:#D73A49;"> struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  name </span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">  age </span><span style="color:#D73A49;">int</span></span>
<span class="line"><span style="color:#24292E;">  weight </span><span style="color:#D73A49;">int</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#6F42C1;"> Student</span><span style="color:#D73A49;"> struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  Human</span></span>
<span class="line"><span style="color:#D73A49;">  int</span></span>
<span class="line"><span style="color:#24292E;">  speciality </span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Human {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">p.Human.name </span><span style="color:#6A737D;">// 正常访问</span></span>
<span class="line"><span style="color:#24292E;">p.name       </span><span style="color:#6A737D;">// 直接访问</span></span>
<span class="line"><span style="color:#24292E;">p.int </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 3</span><span style="color:#6A737D;">    // 普通类型</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>方法，方法就是特殊的函数，它的第1个参数是结构：A method is a function with an implicit first argument, called a receiver.如下：</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (p </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">Persion) </span><span style="color:#6F42C1;">say</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  fmt.</span><span style="color:#005CC5;">Pringln</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;my name is </span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, p.name)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>为什么要单独写呢，因为要考虑接收者既可以是普通变量，也可以是指针类型。</p><p>接收者可以是普通类型或指针类型，方法也可以继承和重写。</p><h3 id="反射" tabindex="-1">反射 <a class="header-anchor" href="#反射" aria-label="Permalink to &quot;反射&quot;">​</a></h3><p>反射(类似于镜子)，输入是变量，输出是反射信息，例如变量类型或变量值等信息。</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#032F62;">  &quot;</span><span style="color:#6F42C1;">fmt</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#032F62;">  &quot;</span><span style="color:#6F42C1;">reflect</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#6F42C1;"> main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  n1 </span><span style="color:#D73A49;">:=</span><span style="color:#005CC5;"> 8</span></span>
<span class="line"><span style="color:#24292E;">  fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(reflect.</span><span style="color:#005CC5;">TypeOf</span><span style="color:#24292E;">(n1))</span></span>
<span class="line"><span style="color:#24292E;">  fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(reflect.</span><span style="color:#005CC5;">ValueOf</span><span style="color:#24292E;">(n1))</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 输出：</span></span>
<span class="line"><span style="color:#6A737D;">// int</span></span>
<span class="line"><span style="color:#6A737D;">// 8</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="协程" tabindex="-1">协程 <a class="header-anchor" href="#协程" aria-label="Permalink to &quot;协程&quot;">​</a></h3><p>协程(routine)，概念上类似线程(thread)，核心不同点在于：线程(或进程)是操作系统级别的概念，而协程只是语言层次上的概念。</p><p>可以理解为，协程是 Go 语言内部对线程的虚拟实现，目的是利用物理机的多核优势，实现并发处理。优点是启动快，占用资源少。</p><h2 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h2><p>总体而言，比较通俗且容易上手，但比较奇怪的是多变量声明语法和短变量语法。多变量声明语法，可能对于声明多个同类型的变量比较实用，其他暂时想不到其便捷性是怎么设置的。而短变量语法，感觉略显随意且会覆盖同名变量，是优点也算是缺点吧。</p>`,23);function b(u,d,m,g,E,A){const n=l("Image");return p(),e("div",null,[i,o("p",null,[r(n,{src:c,class:"cursor-pointer"})]),y])}const C=a(t,[["render",b]]);export{h as __pageData,C as default};
