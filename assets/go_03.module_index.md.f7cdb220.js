import{_ as s,o as n,c as a,W as l}from"./chunks/framework.45d8ea02.js";const m=JSON.parse('{"title":"Go语言：项目、包依赖、第三方类库和可执行命令的管理","description":"","frontmatter":{"title":"Go语言：项目、包依赖、第三方类库和可执行命令的管理","date":"2023-09-08T11:42:00.000Z","thumbnail":"/assets/golang.jpg"},"headers":[],"relativePath":"go/03.module/index.md","filePath":"go/03.module/index.md"}'),p={name:"go/03.module/index.md"},e=l(`<p>如今 Go 已内置有模块管理，但一开始支持得并不友好，后来才逐渐完善起来。与 NodeJS 依赖管理有几个不同点：</p><ul><li>NodeJS 依赖是从统一的中心源(npm)下载的，Go 没有中心源，通常从 git 仓库下载，常见第三方库都托管在 GitHub 上面</li><li>NodeJS 下载依赖到项目的 node_modules 目录下，Go 下载依赖到全局目录($GOPATH/pkg目录)下</li></ul><h2 id="管理历史" tabindex="-1">管理历史 <a class="header-anchor" href="#管理历史" aria-label="Permalink to &quot;管理历史&quot;">​</a></h2><p>依赖管理的变化，主要经历以下 3 个阶段：</p><h3 id="gopath" tabindex="-1">GOPATH <a class="header-anchor" href="#gopath" aria-label="Permalink to &quot;GOPATH&quot;">​</a></h3><p><code>GOPATH</code> 是一个环境变量，表示 GO 代码的保存路径。 项目和依赖都要在 GOPATH 目录下，于是产生一些问题：项目必须在 GOPATH 目录下创建，不够灵活；依赖只能存一个版本，如果不同项目依赖不同版本的库会很麻烦。</p><h3 id="vendor" tabindex="-1">VENDOR <a class="header-anchor" href="#vendor" aria-label="Permalink to &quot;VENDOR&quot;">​</a></h3><p>从 v1.5 版本起，GO 引入 Vendor 模式：如果项目根目录下有 vendor 目录，那么会优先使用该目录下的库。对于 vendor 的管理，社区中有些一些便捷工具，如 godep 和 dep 等。</p><h3 id="module" tabindex="-1">MODULE <a class="header-anchor" href="#module" aria-label="Permalink to &quot;MODULE&quot;">​</a></h3><p>从 v1.11 版本起，GO 引入 Module 模式，从 v1.13 起， GO MODULE 称为默认的依赖管理工具。项目中保存 2 个特殊文件：</p><ul><li>go.mod：类似于 package.json 文件，记录项目名、GO 版本和依赖信息</li><li>go.sum：类似于 package-lock.json 记录依赖的哈希值，确保项目在不同环境中下载到的依赖是一致的，该文件由 GO 更新无须手动操作。</li></ul><p>下面只说 Go Module 相关的内容。</p><h2 id="环境变量" tabindex="-1">环境变量 <a class="header-anchor" href="#环境变量" aria-label="Permalink to &quot;环境变量&quot;">​</a></h2><h3 id="go1111module" tabindex="-1">GO1111MODULE <a class="header-anchor" href="#go1111module" aria-label="Permalink to &quot;GO1111MODULE&quot;">​</a></h3><p>GO111MODULE 是一个环境变量，表示是否开启 GO MODULE 模式，有 3 个可选值：</p><ul><li>off ：禁用，将从 GOPATH 和 vendor 中查找依赖</li><li>on ：启用，将从 go.mod 中查找依赖</li><li>auto：自动，项目在 GOPATH/src 目录外且存在 go.mod 文件时启用</li></ul><p>设置命令为：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-light"><code><span class="line"><span style="color:#6F42C1;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">env</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-w</span><span style="color:#24292E;"> </span><span style="color:#032F62;">GO1111MODULE=on</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="goproxy" tabindex="-1">GOPROXY <a class="header-anchor" href="#goproxy" aria-label="Permalink to &quot;GOPROXY&quot;">​</a></h3><p><code>GOPROXY</code> 是一个环境变量，表示下载依赖时使用的代理地址，需要设置代理地址主要是因为：GO 没有自己的中心源，很多库的开发者将代码托管在 Github 上，而国内因为墙的原因访问 Github 是很困难的。从 v1.13 起，GO 的默认代理地址为：<a href="https://proxy.golang.org" target="_blank" rel="noreferrer">https://proxy.golang.org</a>，该地址在国内无法访问，可以设置国内代理， 命令如下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-light"><code><span class="line"><span style="color:#6F42C1;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">env</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-w</span><span style="color:#24292E;"> </span><span style="color:#032F62;">GOPROXY=https://goproxy.cn,direct</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="管理命令" tabindex="-1">管理命令 <a class="header-anchor" href="#管理命令" aria-label="Permalink to &quot;管理命令&quot;">​</a></h2><p>启用 GO MODULE 后，可以使用 <code>go mod &lt;cmd&gt;</code> 开头的命令管理，命令中的 mod 指 module(模块)。常用的命令有如下：</p><h3 id="初始项目" tabindex="-1">初始项目 <a class="header-anchor" href="#初始项目" aria-label="Permalink to &quot;初始项目&quot;">​</a></h3><p>在项目中创建 go.mod 文件，其中 name 可选，默认使用文件夹的名字。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-light"><code><span class="line"><span style="color:#6F42C1;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mod</span><span style="color:#24292E;"> </span><span style="color:#032F62;">init</span><span style="color:#24292E;"> [name]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="下载依赖" tabindex="-1">下载依赖 <a class="header-anchor" href="#下载依赖" aria-label="Permalink to &quot;下载依赖&quot;">​</a></h3><p>依赖会下载到 $GOPATH/pkg 目录下，然后更新 go.mod 文件和 go.sum 文件中的信息，如下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-light"><code><span class="line"><span style="color:#6A737D;"># 下载依赖</span></span>
<span class="line"><span style="color:#6F42C1;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">pkg-nam</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 更新全部依赖 -u 表示 update patch, 表示仅更新版本号(semver)中的 patch 位</span></span>
<span class="line"><span style="color:#6F42C1;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-u=patch</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 下载全部依赖：适用于首次下载项目。</span></span>
<span class="line"><span style="color:#6F42C1;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mod</span><span style="color:#24292E;"> </span><span style="color:#032F62;">download</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="删除依赖" tabindex="-1">删除依赖 <a class="header-anchor" href="#删除依赖" aria-label="Permalink to &quot;删除依赖&quot;">​</a></h3><p>以下命令，会根据代码引用情况自动更新/删除 go.mod 中的依赖，清除无用的依赖。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-light"><code><span class="line"><span style="color:#6F42C1;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mod</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tidy</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="安装命令" tabindex="-1">安装命令 <a class="header-anchor" href="#安装命令" aria-label="Permalink to &quot;安装命令&quot;">​</a></h3><p>以下命令，会安装二进制命令也会安装到 $GOPATH/bin 目录下。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-light"><code><span class="line"><span style="color:#6F42C1;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">pkg-nam</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="包语法" tabindex="-1">包语法 <a class="header-anchor" href="#包语法" aria-label="Permalink to &quot;包语法&quot;">​</a></h2><p>包在 Go 语言中是按文件夹为基本形态的，这与 NodeJS 按文件为基本形态有很大不同，下面说说其声明语法和导入语法</p><h3 id="声明语法" tabindex="-1">声明语法 <a class="header-anchor" href="#声明语法" aria-label="Permalink to &quot;声明语法&quot;">​</a></h3><p>包以文件夹为基本形态，同一文件夹下的 .go 文件均需声明为同一个包。包的名字不必跟文件夹名字相同，但通常情况下都建议保持一致。同一 package 内的变量可随意调用且无需引入，即使在不同文件中。例如：</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-light"><code><span class="line"><span style="color:#6A737D;">// a/b.go</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;juetan&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// a/c.go</span></span>
<span class="line"><span style="color:#24292E;">fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(name)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>典型的 .go 文件语法为如下</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-light"><code><span class="line"><span style="color:#6A737D;">// 声明所在的包</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">A</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 导入其他包</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">B</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 首字母小写表示私有变量(private)，仅可在包内范围使用</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 首字母大写表示导出变量(public)</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> Age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 特殊函数，导入时调用(多次导入仅调用1次)，可有多个同名函数，按顺序调用</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 特殊函数，仅在 package main 中有效，作为二进制命令的入口</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="导入语法" tabindex="-1">导入语法 <a class="header-anchor" href="#导入语法" aria-label="Permalink to &quot;导入语法&quot;">​</a></h3><p>使用 import 关键字进行导入，导入的是路径，使用的是包名。例如：</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-light"><code><span class="line"><span style="color:#6A737D;">// a/b/c.go 注：文件夹名字与包名字不同，即 b 和 c</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">d</span></span>
<span class="line"><span style="color:#6A737D;">// 声明导出函数</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Run</span><span style="color:#24292E;">() {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>则在使用时，应该是这样：</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">xx</span></span>
<span class="line"><span style="color:#6A737D;">// 按路径进行导入</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">a/b</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#6A737D;">// 按包名进行使用</span></span>
<span class="line"><span style="color:#24292E;">d.</span><span style="color:#005CC5;">Run</span><span style="color:#24292E;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>除直接按路径导入外，还有些特殊语法，如下：</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-light"><code><span class="line"><span style="color:#6A737D;">// 1. 使用 . 表示泛导入，可以省略包名进行调用</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">fmt</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 省略包名，直接使用函数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello, world&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 2. 别名</span></span>
<span class="line"><span style="color:#005CC5;">import</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  f </span><span style="color:#032F62;">&quot;fmt&quot;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  f.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello, world&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 3. 特殊别名 _ 表示丢弃变量名，用处是仅调用该包里面的init函数进行初始化操作</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">_</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/ziutek/mymysql/godrv</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="项目结构" tabindex="-1">项目结构 <a class="header-anchor" href="#项目结构" aria-label="Permalink to &quot;项目结构&quot;">​</a></h2><p>参考：<a href="https://zhuanlan.zhihu.com/p/659823790" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/659823790</a></p><p>在 Go 语言中，项目有 2 种类型：package(构建第三方类库), command(构建可执行命令)。终极形态，如果既要导出类库也要导出命令，通常是在 package 的基础上，将命令统一放置在 cmd 目录下，如下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-light"><code><span class="line"><span style="color:#6A737D;"># 模块配置</span></span>
<span class="line"><span style="color:#6F42C1;">go.mod</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 特殊文件，依赖包的入口文件，与 go.mod 中的声明保持一致</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">name</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">.go</span></span>
<span class="line"><span style="color:#6A737D;"># 依赖包的子包</span></span>
<span class="line"><span style="color:#6F42C1;">auth</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">auth.go</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 特殊文件，命令包的入口文件</span></span>
<span class="line"><span style="color:#6F42C1;">main.go</span></span>
<span class="line"><span style="color:#6A737D;"># 命令包的子包</span></span>
<span class="line"><span style="color:#6F42C1;">cmd</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">run</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">main.go</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 特殊文件夹，内部依赖子包，不会被导出外部</span></span>
<span class="line"><span style="color:#6F42C1;">internal</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">hash</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">hash</span><span style="color:#24292E;">.go</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>以上，将导出 2 个包和 2 个命令，使用如下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-light"><code><span class="line"><span style="color:#6F42C1;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">nam</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#6F42C1;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">nam</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;</span><span style="color:#032F62;">/auth</span></span>
<span class="line"><span style="color:#6F42C1;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">nam</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#6F42C1;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">nam</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;</span><span style="color:#032F62;">/cmd/run</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h2><p>以上，了解 GO 对于依赖的管理，同时知道：</p><ul><li>GOPATH 表示 GO 代码的引用地方</li><li>GO111MODULE 表示是否启用 GO MODULE 模式</li><li>GOPROXY 表示代理地址</li><li>go mod xx 用于管理 GO MODULE</li><li>go get 用于下载依赖</li></ul>`,58),o=[e];function r(c,t,i,b,u,y){return n(),a("div",null,o)}const h=s(p,[["render",r]]);export{m as __pageData,h as default};
