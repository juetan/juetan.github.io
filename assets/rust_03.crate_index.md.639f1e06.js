import{_ as s,o as a,c as n,W as l}from"./chunks/framework.6aa3b0fe.js";const g=JSON.parse('{"title":"Rust系列[五]：包、模块和命名空间","description":"","frontmatter":{"title":"Rust系列[五]：包、模块和命名空间","date":"2023-08-31T19:02:00.000Z"},"headers":[],"relativePath":"rust/03.crate/index.md","filePath":"rust/03.crate/index.md"}'),o={name:"rust/03.crate/index.md"},p=l(`<p>Rust 中的包称为 crate，包管理器称为 cargo，这两者的存在让我们很方便地管理和下载第三方库。先来简单过一下包管理器的使用，后面再说说如何创建一个包。</p><h2 id="cargo-的使用" tabindex="-1">cargo 的使用 <a class="header-anchor" href="#cargo-的使用" aria-label="Permalink to &quot;cargo 的使用&quot;">​</a></h2><p>cargo 既是一个包管理器，同时也是一个构建工具。作为包管理器时，主要从 <a href="https://crates.io" target="_blank" rel="noreferrer">crates.io</a> 源下载，国内可以使用字节跳动的 <a href="https://rsproxy.cn" target="_blank" rel="noreferrer">rsproxy</a> 镜像源。</p><h3 id="安装依赖" tabindex="-1">安装依赖 <a class="header-anchor" href="#安装依赖" aria-label="Permalink to &quot;安装依赖&quot;">​</a></h3><p>你可以手动在 cargo.toml 写入依赖，然后运行 <code>cargo build</code> 来安装。但最好的办法是这样：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-light"><code><span class="line"><span style="color:#6F42C1;">cargo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">crate-nam</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>这样会自动在 cargo.toml 写入依赖，并自动下载依赖到一个全局目录，也就是说依赖是全局的，不像 NodeJS 每个项目都有单独依赖。</p><h3 id="卸载依赖" tabindex="-1">卸载依赖 <a class="header-anchor" href="#卸载依赖" aria-label="Permalink to &quot;卸载依赖&quot;">​</a></h3><p>类似于安装依赖，卸载也比较简单。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-light"><code><span class="line"><span style="color:#6F42C1;">cargo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">remove</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">crate-nam</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><h2 id="创建项目" tabindex="-1">创建项目 <a class="header-anchor" href="#创建项目" aria-label="Permalink to &quot;创建项目&quot;">​</a></h2><p>可创建的项目分为两种：二进制和代码库。</p><h3 id="二进制项目" tabindex="-1">二进制项目 <a class="header-anchor" href="#二进制项目" aria-label="Permalink to &quot;二进制项目&quot;">​</a></h3><p>默认生成的就是二进制项目</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-light"><code><span class="line"><span style="color:#6F42C1;">cargo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">nam</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>默认会生成如下的目录结构</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-light"><code><span class="line"><span style="color:#24292e;">-- src</span></span>
<span class="line"><span style="color:#24292e;">---- main.rs</span></span>
<span class="line"><span style="color:#24292e;">-- cargo.toml</span></span>
<span class="line"><span style="color:#24292e;">-- cargo.lock</span></span></code></pre></div><p>其中</p><h2 id="二进制-crate" tabindex="-1">二进制 crate <a class="header-anchor" href="#二进制-crate" aria-label="Permalink to &quot;二进制 crate&quot;">​</a></h2><p>在一个 cargo 项目中，入口通常是 <code>src/main.rs</code> 文件，且文件中包含 <code>main</code> 函数，编译后会生成 <code>&lt;项目名&gt;.exe</code> 等文件。</p><p>除外，还可以 <code>src/bin</code> 目录下新增多个二进制 crate，每个文件都会生成同名可执行二进制文件。</p><h2 id="代码库-crate" tabindex="-1">代码库 crate <a class="header-anchor" href="#代码库-crate" aria-label="Permalink to &quot;代码库 crate&quot;">​</a></h2><p>在一个 cargo 项目中，入口通常是 <code>src/lib.rs</code> 文件，文件中没有 <code>main</code> 函数，编译后会生成 <code>&lt;项目名&gt;.rlib</code> 等文件。这个比较常见，例如 rand 这个生成随机数的库就是，通常用于发布给别人用。</p><h2 id="内联模块" tabindex="-1">内联模块 <a class="header-anchor" href="#内联模块" aria-label="Permalink to &quot;内联模块&quot;">​</a></h2><p>通过 <code>mod</code> 关键字可以声明一个内联模块，如下：</p><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-light"><code><span class="line"><span style="color:#D73A49;">mod</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">one</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">mod</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">two</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">three</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;three&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">one</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">two</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">three</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>以上，模块内的成员默认不导出，需通过 <code>pub</code> 关键字导出，成员间使用 <code>::</code> 分隔。如果路径较长，可以通过 <code>use</code> 关键字简化，如下：</p><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-light"><code><span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">one</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">two</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">three;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">three</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="文件模块" tabindex="-1">文件模块 <a class="header-anchor" href="#文件模块" aria-label="Permalink to &quot;文件模块&quot;">​</a></h2><p>默认一个文件就是一个模块，例如 <code>src/guess_number</code> 文件：</p><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-light"><code><span class="line"><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">guess</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#6A737D;">  // ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 <code>src/main.rs</code> 文件中，可以这样使用：</p><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-light"><code><span class="line"><span style="color:#D73A49;">mod</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">guess_number</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">guess_number</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">guess</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如果有目录嵌套，则按嵌套结构来，需要注意的是目录名模块需在需从特殊的 <code>mod.rs</code> 导出，例如 <code>src/user/mod.rs</code>：</p><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-light"><code><span class="line"><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hello</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#6A737D;">  // ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 <code>src/main.rs</code> 中使用：</p><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-light"><code><span class="line"><span style="color:#D73A49;">mod</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">user</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">user</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">hello</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h2>`,38),e=[p];function c(t,r,i,y,d,u){return a(),n("div",null,e)}const b=s(o,[["render",c]]);export{g as __pageData,b as default};
