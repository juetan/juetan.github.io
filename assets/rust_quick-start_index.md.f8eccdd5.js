import{_ as p,I as e,o as t,c,k as s,M as n,W as o,a as l}from"./chunks/framework.6aa3b0fe.js";const r="/assets/image-vs-dl.ef00efaf.png",i="/assets/image-vs-cpp.2a4bc46a.png",y="/assets/image-vs-comp.240f59a1.png",u="/assets/image-vs-lang.622bb572.png",d="/assets/image-rustup-dl.d92c30e8.png",_="/assets/image-rustup-install.a4595638.png",g="/assets/image-rustup-ver.1a93928f.png",E="/assets/image-rust-compile.287ed95b.png",m="/assets/image-rust-exec.767bb5c4.png",C="/assets/image-cargo-new.801ff44e.png",h="/assets/image-cargo-run.030ac84b.png",A="/assets/image-cargo-target.03155175.png",z=JSON.parse('{"title":"Rust系列[一]：安装和上手","description":"","frontmatter":{"title":"Rust系列[一]：安装和上手","date":"2023-08-25T11:50:00.000Z","categories":"rust","tags":"rust"},"headers":[],"relativePath":"rust/quick-start/index.md","filePath":"rust/quick-start/index.md"}'),D={name:"rust/quick-start/index.md"},F=o('<p>Rust 是一门内存安全的语言。</p><h2 id="安装-rust" tabindex="-1">安装 Rust <a class="header-anchor" href="#安装-rust" aria-label="Permalink to &quot;安装 Rust&quot;">​</a></h2><p>在不同操作系统上，安装的方式和步骤略有差异，这里以 Windows 操作系统为例。在 Windows 上，Rust 的安装分为两部分：c++依赖的安装，rustup 的安装。</p><h3 id="安装-c-依赖" tabindex="-1">安装 C++ 依赖 <a class="header-anchor" href="#安装-c-依赖" aria-label="Permalink to &quot;安装 C++ 依赖&quot;">​</a></h3><p>Rust 部分功能依赖于 c++，因此需要提前安装相关依赖，最便捷的办法就是通过 VS 安装。</p><ol><li>通过 <a href="https://visualstudio.microsoft.com/zh-hans/downloads/" target="_blank" rel="noreferrer">官网</a> 下载 VS 社区版并安装。</li></ol>',6),b=s("ol",{start:"2"},[s("li",null,[l("选择 "),s("code",null,"使用C++的桌面开发"),l(" 选项")])],-1),q=s("ol",{start:"3"},[s("li",null,"选择对应操作系统的开发组件")],-1),T=s("ol",{start:"4"},[s("li",null,"选择英文语言包及其他语言包")],-1),f=o('<p>点击 <code>安装</code> 等待下载和安装，我所选的依赖有 2G+大小，网络不好的话得等好一会儿。</p><h3 id="安装-rustup" tabindex="-1">安装 Rustup <a class="header-anchor" href="#安装-rustup" aria-label="Permalink to &quot;安装 Rustup&quot;">​</a></h3><p>Rust 的安装有<a href="https://forge.rust-lang.org/infra/other-installation-methods.html" target="_blank" rel="noreferrer">很多方式</a>，这里以官方推荐的 Rustup 为例，Rustup 是 Rust 的版本管理和命令行工具。</p><ol><li>通过 <a href="https://www.rust-lang.org/tools/install" target="_blank" rel="noreferrer">官网</a> 下载 Rustup 并安装。</li></ol>',4),R=s("ol",{start:"2"},[s("li",null,"选择默认方式即可，等待依赖下载和安装.")],-1),S=s("ol",{start:"3"},[s("li",null,[l("安装完重新打开命令行，输入 "),s("code",null,"rustc --version"),l(" 应该有输出，代表安装成功。")])],-1),v=o(`<p>至此，Rust 安装已完成。</p><h2 id="编译和执行" tabindex="-1">编译和执行 <a class="header-anchor" href="#编译和执行" aria-label="Permalink to &quot;编译和执行&quot;">​</a></h2><p>Rust 是一门编译型语言，需要先编译再运行。接下来写个小示例看看，请上最经典的 <code>hello, world</code>。</p><ol><li>在任意目录下，新建 <code>main.rs</code> 文件</li></ol><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-light"><code><span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello, world!&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>以上代码中：</p><ul><li><code>fn</code> 是 function 的缩写，表示声明一个函数</li><li><code>main</code> 是函数名，当名字为 main 时作为命令行程序的入口</li><li><code>println</code> 用于打印带换行符的字符串，<code>!</code> 表示这是个编译宏。</li></ul><ol start="2"><li>运行 <code>rustc ./main.ts</code> 命令，然后你应该能看到当前目录下多出两个文件：<code>main.exe</code> 和 <code>main.pdb</code></li></ol>`,8),k=o('<p>其中：</p><ul><li><code>rustc</code> 是 Rust 的编译命令，类似于 <code>javac</code>，其中的 <code>c</code> 是 compile 的缩写，这个命令是跟随 <code>rustup</code> 安装的。</li><li><code>.exe</code> 是 Windows 平台下可执行文件的后缀名</li><li><code>.pdb</code> 是一个包含调试信息的文件</li></ul><ol start="3"><li>运行 <code>./main.exe</code> 命令，不出意外的话能看到如下的输出</li></ol>',3),x=o('<h2 id="包管理工具" tabindex="-1">包管理工具 <a class="header-anchor" href="#包管理工具" aria-label="Permalink to &quot;包管理工具&quot;">​</a></h2><p>类似于 NodeJS 有 npm 工具，Rust 也有自己的包管理工具：<code>cargo</code>(直译为货物)。通常来说，别人写好并发布出来的代码包，叫第三方库，但在不同语言间也有不同叫法。例如，在 NodeJS 中第三方库称为 <code>package</code>，而在 Rust 中称为 <code>crate</code>(直译为运货用的大木箱)。</p><p>接下来，写个小项目感受下：系统生成一个随机数，我们输入一个数，然后系统会提示我们大了、小了还是相等。在生成随机数时，会用到一个叫 <code>rand</code> 的 crate(第三方库)</p><ol><li>运行 <code>cargo new &lt;name&gt;</code> 命令，此时会生成如下的目录和文件</li></ol>',4),P=o(`<p>其中：</p><ul><li><code>cargo</code> 是 Rust 的包管理命令，同时也是构建工具，这个命令是随 <code>rustup</code> 安装的</li><li><code>Cargo.toml</code> 是 Cargo 的配置文件，类似于 NodeJS 中的 package.json 文件</li><li><code>src/main.rs</code> 是 Cargo 项目的入口</li></ul><ol start="2"><li>打开 <code>Cargo.toml</code> 文件，添加 rand 依赖，toml 是一种类似于 json/yaml 的数据文件格式</li></ol><div class="language-toml"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-light"><code><span class="line"><span style="color:#6A737D;">#...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">dependencies</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">rand = </span><span style="color:#032F62;">&quot;0.8.5&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#...</span></span></code></pre></div><ol start="3"><li>打开 <code>src/main.rs</code> 文件，编写我们的代码</li></ol><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-light"><code><span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">io;</span></span>
<span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rand</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">Rng</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">cmp</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">Ordering</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;欢迎来到猜数游戏&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> secret_number </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rand</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">thread_rng</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">gen_range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">..=</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;请输入你的猜数：&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">mut</span><span style="color:#24292E;"> guess </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">new</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">io</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">stdin</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">read_line</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;mut</span><span style="color:#24292E;"> guess)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Failed to read line&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> guess</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">u32</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> guess</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">trim</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;请输入一个数字&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">match</span><span style="color:#24292E;"> guess</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">cmp</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">secret_number) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">Ordering</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">Less</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;小了, 数字是: {}&quot;</span><span style="color:#24292E;">, secret_number),</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">Ordering</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">Greater</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;大了, 数字是: {}&quot;</span><span style="color:#24292E;">, secret_number),</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">Ordering</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">Equal</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;相等&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上面的代码，涉及的语法有点多，我们来慢慢看下，首先是顶部的声明：</p><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-light"><code><span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> std</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">io</span></span></code></pre></div><ul><li><code>use</code> 表示使用某个模块，类似于 NodeJS 的 <code>import</code> 语法</li><li><code>std</code> 表示内置的标准库，std 是 standard 的缩写</li><li><code>::</code> 表示子成员，在对象上表示其静态成员</li><li><code>io</code> 是输出输出库，io 是 input/output 的缩写</li></ul><p>接下来是：</p><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> secret_number </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rand</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">thread_rng</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">gen_range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">..=</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">mut</span><span style="color:#24292E;"> guess </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">new</span><span style="color:#24292E;">();</span></span></code></pre></div><ul><li><code>let</code> 用于声明一个变量，看起来是可变的，但默认是不可修改的，只是允许用 <code>mut</code> 标识为可变</li><li><code>1..=100</code> 表示一个范围</li><li><code>mut</code> 表示该变量可修改(默认不可修改)，mut 是 mutable 的缩写</li></ul><p>再接下来是</p><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-light"><code><span class="line"><span style="color:#6F42C1;">io</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">stdin</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">read_line</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;mut</span><span style="color:#24292E;"> guess)</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Failed to read line&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><ul><li><code>&amp;</code> 表示对某个变量的引用地址</li><li><code>&amp;mut</code> 表示传入一个可修改的变量引用地址</li><li><code>expect</code> 用于捕获异常</li></ul><p>最后是</p><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-light"><code><span class="line"><span style="color:#D73A49;">match</span><span style="color:#24292E;"> guess</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">cmp</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">secret_number) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Ordering</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">Less</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;小了&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Ordering</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">Greater</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;大了&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Ordering</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">Equal</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;相等&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li><code>match</code> 用于匹配某个值，类似于 switch 语法</li><li><code>cmp</code> 方法用于比对两个数字，返回一个枚举(即 Ordering)。cmp 是 compare 的缩写</li><li><code>Ordering</code> 是一个枚举值，包含 Less/Greater/Equal 成员</li></ul><ol start="4"><li>运行 <code>cargo run</code> 命令，此时会先下载我们刚写入的 rand 依赖，然后再编译执行，如下：</li></ol>`,19),V=s("ol",{start:"5"},[s("li",null,[l("同时，当前目录下多个 "),s("code",null,"target"),l(" 目录，其中 "),s("code",null,"debug"),l(" 目录放着我们临时编译好的文件")])],-1),N=s("h2",{id:"结语",tabindex:"-1"},[l("结语 "),s("a",{class:"header-anchor",href:"#结语","aria-label":'Permalink to "结语"'},"​")],-1),I=s("p",null,"以上简单了解了几个关于 Rust 的重要概念：",-1),w=s("ul",null,[s("li",null,"rustup 是 Rust 的版本管理工具，如同 NodeJS 中的 nvm。"),s("li",null,"rustc 是 Rust 的编译命令"),s("li",null,"cargo 是 Rust 的包管理和构建命令"),s("li",null,"crate 是 Rust 对于第三方库的叫法")],-1);function O(J,G,W,$,j,B){const a=e("Image");return t(),c("div",null,[F,s("p",null,[n(a,{src:r,class:"cursor-pointer"})]),b,s("p",null,[n(a,{src:i,class:"cursor-pointer"})]),q,s("p",null,[n(a,{src:y,class:"cursor-pointer"})]),T,s("p",null,[n(a,{src:u,class:"cursor-pointer"})]),f,s("p",null,[n(a,{src:d,class:"cursor-pointer"})]),R,s("p",null,[n(a,{src:_,class:"cursor-pointer"})]),S,s("p",null,[n(a,{src:g,class:"cursor-pointer"})]),v,s("p",null,[n(a,{src:E,class:"cursor-pointer"})]),k,s("p",null,[n(a,{src:m,class:"cursor-pointer"})]),x,s("p",null,[n(a,{src:C,class:"cursor-pointer"})]),P,s("p",null,[n(a,{src:h,class:"cursor-pointer"})]),V,s("p",null,[n(a,{src:A,class:"cursor-pointer"})]),N,I,w])}const H=p(D,[["render",O]]);export{z as __pageData,H as default};
