import{_ as s,o as n,c as a,W as l}from"./chunks/framework.6aa3b0fe.js";const D=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"rust/todo.md","filePath":"rust/todo.md"}'),p={name:"rust/todo.md"},o=l(`<h2 id="生命周期" tabindex="-1">生命周期 <a class="header-anchor" href="#生命周期" aria-label="Permalink to &quot;生命周期&quot;">​</a></h2><p>指的是引用的生命周期，避免悬垂指针和使用已经释放的内容，通常在函数参数和返回值中应用。</p><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-light"><code><span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">mut</span><span style="color:#24292E;"> s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello world&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> word </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">first_word</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">s);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    s</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">();</span><span style="color:#6A737D;"> // 错误！</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;the first word is: {}&quot;</span><span style="color:#24292E;">, word);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">first_word</span><span style="color:#24292E;">(s</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#6F42C1;">str</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> bytes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">as_bytes</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (i, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">item) </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> bytes</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">iter</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">enumerate</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> item </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">b&#39; &#39;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">s[</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">..</span><span style="color:#24292E;">i];</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">s[</span><span style="color:#D73A49;">..</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>以上的例子中，<code>&amp;s[0..i]</code> 建立了 <code>s</code> 的联系，且是不可变引用。当调用 <code>clear</code> 时，它需要一个可变引用，而此时已经有了不可变引用： <code>word</code>，同时有用不可变引用和可变引用是不可能。</p>`,4),e=[o];function t(c,r,y,i,E,d){return n(),a("div",null,e)}const _=s(p,[["render",t]]);export{D as __pageData,_ as default};
