import{_ as s,c as a,o as l,S as n}from"./chunks/framework.3EKbrk2Y.js";const y=JSON.parse('{"title":"Bash工具的使用，以及日常使用。","description":"","frontmatter":{"title":"Bash工具的使用，以及日常使用。","date":"2023-09-27T10:31:00.000Z"},"headers":[],"relativePath":"tools/bash/index.md","filePath":"tools/bash/index.md"}'),e={name:"tools/bash/index.md"},p=n(`<p>Bash，全名 Bourne Again Bash。本文主要参照阮一峰的 <a href="https://wangdoc.com/bash/" target="_blank" rel="noreferrer">Bash 脚本教程</a> 教程。Bash 是一门比较宽松的脚本语法，对变量和变量类型没有什么严格限制。</p><h2 id="基本语法" tabindex="-1">基本语法 <a class="header-anchor" href="#基本语法" aria-label="Permalink to &quot;基本语法&quot;">​</a></h2><h3 id="进入" tabindex="-1">进入 <a class="header-anchor" href="#进入" aria-label="Permalink to &quot;进入&quot;">​</a></h3><p>登陆 linux 服务器，默认就是 shell 环境。如果不是 Bash 环境，可以使用如下命令进入：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#6F42C1;">bash</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="退出" tabindex="-1">退出 <a class="header-anchor" href="#退出" aria-label="Permalink to &quot;退出&quot;">​</a></h3><p>使用如下命令退出：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#005CC5;">exit</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="打印内容" tabindex="-1">打印内容 <a class="header-anchor" href="#打印内容" aria-label="Permalink to &quot;打印内容&quot;">​</a></h3><p>使用 echo 命令打印内容，默认在末尾添加换行符，语法如下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#005CC5;">echo</span><span style="color:#D73A49;"> &lt;</span><span style="color:#032F62;">conten</span><span style="color:#24292E;">t</span><span style="color:#D73A49;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>内容默认是字符串，可以使用变量，示例如下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#6A737D;"># 输出：位置 =&gt; /usr/bin/bash</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#032F62;"> &quot;位置 =&gt; </span><span style="color:#24292E;">$SHELL</span><span style="color:#032F62;">&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="声明变量" tabindex="-1">声明变量 <a class="header-anchor" href="#声明变量" aria-label="Permalink to &quot;声明变量&quot;">​</a></h3><p>使用 declare 命令声明变量，语法如下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">declare</span><span style="color:#D73A49;"> &lt;</span><span style="color:#032F62;">option</span><span style="color:#24292E;">s</span><span style="color:#D73A49;">&gt;</span><span style="color:#D73A49;"> &lt;</span><span style="color:#032F62;">nam</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;</span><span style="color:#032F62;">=</span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">valu</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>但此命令通常用于高级变量的声明(如只读变量)，日常使用可以省略 declare 和 options 部分，直接分配值给变量名即可。此外：</p><ul><li>变量名区分大小写，需注意大小写。</li><li>变量值无类型，或者说都是字符串类型。</li><li>变量值是数字时，可以进行算数操作和比较。</li></ul><h3 id="访问变量" tabindex="-1">访问变量 <a class="header-anchor" href="#访问变量" aria-label="Permalink to &quot;访问变量&quot;">​</a></h3><p>访问时须在变量名前加 $ 符号，语法如下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#6F42C1;">$&lt;name&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>变量不存在不会报错，而是返回空字符串，示例如下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#24292E;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;绝弹&quot;</span></span>
<span class="line"><span style="color:#6A737D;"># 输出：绝弹</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> $name</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="命令替换" tabindex="-1">命令替换 <a class="header-anchor" href="#命令替换" aria-label="Permalink to &quot;命令替换&quot;">​</a></h3><p>执行命令并返回结果，语法如下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#032F62;">$(</span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">command</span><span style="color:#D73A49;">&gt;</span><span style="color:#032F62;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>示例如下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#6A737D;"># 输出：当前位置：/j/github/juetan</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#032F62;"> &quot;当前位置：$(</span><span style="color:#005CC5;">pwd</span><span style="color:#032F62;">)&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="参数展开" tabindex="-1">参数展开 <a class="header-anchor" href="#参数展开" aria-label="Permalink to &quot;参数展开&quot;">​</a></h3><p>操作变量并返回结果，语法如下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#24292E;">\${&lt;expansion&gt;}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在参数展开中，访问变量不需要加 $ 符号开头。一些常见的操作如下：</p><ul><li>\${var}：简单展开变量</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#24292E;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;juetan&quot;</span></span>
<span class="line"><span style="color:#6A737D;"># 输出：juetan</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> \${name}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>\${var:-default}：变量未设置或为空时，使用默认值</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#6A737D;"># 输出：我是默认值</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> \${site</span><span style="color:#D73A49;">:-</span><span style="color:#032F62;">&quot;我是默认值&quot;</span><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>\${#var}：返回字符串长度</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#24292E;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;绝弹&quot;</span></span>
<span class="line"><span style="color:#6A737D;"># 输出：2</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> \${</span><span style="color:#D73A49;">#</span><span style="color:#24292E;">name}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="条件测试" tabindex="-1">条件测试 <a class="header-anchor" href="#条件测试" aria-label="Permalink to &quot;条件测试&quot;">​</a></h3><p>使用 [] 运算符执行测试(test 命令的简写形式)，示例如下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#24292E;">[ </span><span style="color:#D73A49;">-f</span><span style="color:#24292E;"> /path/to/file ] &amp;&amp; </span><span style="color:#005CC5;">echo</span><span style="color:#032F62;"> &quot;文件存在&quot;</span><span style="color:#D73A49;"> ||</span><span style="color:#005CC5;"> echo</span><span style="color:#032F62;"> &quot;文件不存在&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>注意：[] 内部左右需以空格隔开。</p><h2 id="文件操作" tabindex="-1">文件操作 <a class="header-anchor" href="#文件操作" aria-label="Permalink to &quot;文件操作&quot;">​</a></h2><p>Bash 提供了一系列命令和操作符，对文件进行操作。</p><h3 id="覆盖内容" tabindex="-1">覆盖内容 <a class="header-anchor" href="#覆盖内容" aria-label="Permalink to &quot;覆盖内容&quot;">​</a></h3><p>使用 &gt; 操作符可以将内容覆盖到文件中，如果文件不存在会创建，示例如下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#6A737D;"># demo.txt</span></span>
<span class="line"><span style="color:#6F42C1;">我是原本内容</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#032F62;"> &quot;我是替代文本&quot;</span><span style="color:#D73A49;"> &gt;</span><span style="color:#032F62;"> demo.txt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># demo.txt</span></span>
<span class="line"><span style="color:#6F42C1;">我是替代文本</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="追加内容" tabindex="-1">追加内容 <a class="header-anchor" href="#追加内容" aria-label="Permalink to &quot;追加内容&quot;">​</a></h3><p>使用 &gt;&gt; 操作符可以将输出追加到文件末尾，如果文件不存在会创建，示例如下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#005CC5;">echo</span><span style="color:#032F62;"> &quot;我是追加文本&quot;</span><span style="color:#D73A49;"> &gt;&gt;</span><span style="color:#032F62;"> demo.txt</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#032F62;"> &quot;我是追加文本&quot;</span><span style="color:#D73A49;"> &gt;&gt;</span><span style="color:#032F62;"> demo.txt</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#032F62;"> &quot;我是追加文本&quot;</span><span style="color:#D73A49;"> &gt;&gt;</span><span style="color:#032F62;"> demo.txt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># demo.txt</span></span>
<span class="line"><span style="color:#6F42C1;">我是追加文本</span></span>
<span class="line"><span style="color:#6F42C1;">我是追加文本</span></span>
<span class="line"><span style="color:#6F42C1;">我是追加文本</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="echo-命令" tabindex="-1">echo 命令 <a class="header-anchor" href="#echo-命令" aria-label="Permalink to &quot;echo 命令&quot;">​</a></h2><p>作用是输出文本，参数入下：</p><ul><li><p>-n 取消回车符</p></li><li><p>-e 解释引号内的特殊字符，如\\n</p></li><li><p>\\ 命令换行</p></li><li><p>空格 分隔参数</p></li><li><p>; 顺行</p></li><li><p>&amp;&amp; 串行</p></li><li><p>|| 优行</p></li><li><p>type 查看某个命令是否内置</p></li></ul><p>快捷键</p><ul><li>up/down 浏览历史命令</li><li>tab 补全命令 两次tab显示所有选项</li><li>ctrl + c 结束命令</li></ul><p>模式扩展</p><ul><li>~ 当前用户主目录</li><li>? 任意单字符</li><li><ul><li>任意字符 ** 任意目录名</li></ul></li><li>[] 其中字符之一 ^或! 表示不匹配</li><li>[x-y] 简写</li><li>{} 扩展所有值 如 {1,2,3}.txt =&gt; 1.txt 2.txt 3.txt 注意：逗号前后不能有空格，可以嵌套</li><li>{x..y} 简写</li><li>$开头视为变量 变体：\${name} \${!name} 获取变量最终值</li><li>$() 执行命令并返回结果</li><li><code>[[:class:]]</code> 字符之一</li><li>\\ 转义 将特殊字符还原为源字符</li><li>&#39;&#39; 不做转义</li><li>&quot;&quot; 不做转义 $ \` \\ 除外</li><li><code>&lt;&lt; &lt;name&gt;\\n xx\\n &lt;name&gt;\\n</code> here文档 ，名字加单引号不做转义</li></ul><p>变量</p><ul><li>env/printenv 查看环境变量，通常大写</li><li>set 查看/设置自定义变量，仅当前shell可用 x=y 设置变量</li><li>unset 删除变量</li><li>export 向子shell输出变量</li><li>$? 上个命令的退出码 成功0，失败非0</li><li>$$ 当前shell的进程ID</li><li>$_ 上个命令的最后一个参数</li><li>$! 最近一个后台进程ID</li><li>$0 当前shell名称</li><li>$- 当前shell的启动参数</li><li>$# 参数数量</li><li>$@ 参数的值</li><li>\${var:-val} 返回默认值</li><li>\${var:=val} 设置并返回值</li><li>\${var:+word} 有值返回空，无值返回word</li><li>\${var:?msg} 变量存在且不为空返回值，否则打印msg并退出 1~9 表示脚本参数</li><li>declare OPTION var=val 声明特殊类型变量</li><li>OPTION:</li><li>-a 数组</li><li>-f 函数</li><li>-F 函数名</li><li>-i 整形变量</li><li>-l 小写字幕</li><li>-p 打印变量</li><li>-r 只读</li><li>-u 大写</li><li>-z 输出为环境变量</li><li>readonly 等同 declare -r</li><li>let 声明并执行</li></ul><p>字符串</p><ul><li>\${#var} 字符串长度</li><li>\${var:offset:length} 子串</li></ul><p>脚本</p><ul><li>#!/bin/bash 或 #!/usr/bin/env bash # 使用的解释器</li><li>chmod +x 所有用户执行 +rx 读和执行 755 /700</li><li>export PATH=$PATH:~/bin + source ~/.bashrc</li><li><code>#</code> 表示注释</li><li>$0 脚本名</li><li>$* 全部参数</li><li>for 循环</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#032F62;"> &quot;</span><span style="color:#005CC5;">$@</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">; </span><span style="color:#D73A49;">do</span></span>
<span class="line"><span style="color:#005CC5;">  echo</span><span style="color:#24292E;"> $i</span></span>
<span class="line"><span style="color:#D73A49;">done</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h2><p>有点乱，有空再整理。</p>`,66),o=[p];function i(t,r,c,d,u,b){return l(),a("div",null,o)}const m=s(e,[["render",i]]);export{y as __pageData,m as default};
