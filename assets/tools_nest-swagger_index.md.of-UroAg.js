import{_ as a,E as p,c as l,k as o,J as e,S as s,o as t}from"./chunks/framework.3EKbrk2Y.js";const c="/assets/image-swagger1.uRJ5zfdy.png",D=JSON.parse('{"title":"NestJS：基于swagger生成路由文档及进阶用法","description":"","frontmatter":{"title":"NestJS：基于swagger生成路由文档及进阶用法","date":"2023-08-07T00:00:00.000Z"},"headers":[],"relativePath":"tools/nest-swagger/index.md","filePath":"tools/nest-swagger/index.md"}'),r={name:"tools/nest-swagger/index.md"},y=s(`<p>Swagger 是一个用于生成 RESTful API 接口文档的工具，目前其数据规范已更名为 OPENAPI 并作为一项标准进行推广。很多后端语言都有相应的社区包，在 NestJS 中有官方提供的 @nestjs/swagger 库。</p><h2 id="工作原理" tabindex="-1">工作原理 <a class="header-anchor" href="#工作原理" aria-label="Permalink to &quot;工作原理&quot;">​</a></h2><p>安装对应依赖后，使用注释/注解/装饰器在路由方法上，标注请求参数(路径参数/查询参数/body 参数)的类型和返回值类型等信息，如下：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> XxxController</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#6F42C1;">ApiResopnse</span><span style="color:#24292E;">({ type: </span><span style="color:#005CC5;">XXX</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#6F42C1;">ApiOperation</span><span style="color:#24292E;">({ description: </span><span style="color:#032F62;">&#39;分页获取用户&#39;</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#6F42C1;">  getUsers</span><span style="color:#24292E;">(@</span><span style="color:#6F42C1;">Query</span><span style="color:#24292E;">() </span><span style="color:#E36209;">xx</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> QueryParams</span><span style="color:#24292E;">) {}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>编译时，会根据这些信息生成一个符合 OPENAPI 格式的 json 对象，结构类似下面这种。其中：paths 存放接口的信息，包括请求路径、请求参数类型和响应数据类型等信息，如果参数或响应类型是对象等复杂类型，会用 #/components/xx 形式指向 components 下定义的具体类型。</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#005CC5;">  &quot;openapi&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;3.0.0&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#005CC5;">  &quot;paths&quot;</span><span style="color:#24292E;">: {},</span></span>
<span class="line"><span style="color:#005CC5;">  &quot;info&quot;</span><span style="color:#24292E;">: {},</span></span>
<span class="line"><span style="color:#005CC5;">  &quot;tags&quot;</span><span style="color:#24292E;">: [],</span></span>
<span class="line"><span style="color:#005CC5;">  &quot;components&quot;</span><span style="color:#24292E;">: {}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>接着，启动一个 Swagger UI 前端，在这个前端页面加载时再去请求这个 json 对象，渲染出文档页面，用代码表示大概是如下这样：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#6F42C1;"> id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;swaggerui&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  window.</span><span style="color:#6F42C1;">onload</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#D73A49;">    let</span><span style="color:#24292E;"> swaggerOptions </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      url: </span><span style="color:#032F62;">&#39;xxx/openapi.json&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      dom_id: </span><span style="color:#032F62;">&#39;#swaggerui&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#D73A49;">    let</span><span style="color:#24292E;"> ui </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> SwaggerUIBundle</span><span style="color:#24292E;">(swaggerOptions);</span></span>
<span class="line"><span style="color:#24292E;">    window.ui </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ui;</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h2 id="在-nestjs-中的安装" tabindex="-1">在 NestJS 中的安装 <a class="header-anchor" href="#在-nestjs-中的安装" aria-label="Permalink to &quot;在 NestJS 中的安装&quot;">​</a></h2><p>官方的 @nestjs/swagger 包，比 express-swagger-ui 等库有更好的集成，你可以使用 SwaggerModule 扫描应用内的所有接口，也可以使用 SwaggerPlugin 参与到 typescript 的编译中，并从注释中获取接口信息。</p><ol><li>安装依赖</li></ol><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#6F42C1;">pnpm</span><span style="color:#032F62;"> i</span><span style="color:#032F62;"> @nestjs/swagger</span></span></code></pre></div><ol start="2"><li>修改 src/app.controller.ts 文件，使用 @nestjs/swagger 提供的装饰对我们的路由方法进行一些标注，具体的装饰器种类和使用可到官方文档中查看。</li></ol><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#6A737D;">// src/app.controller.ts</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> AppController</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#6F42C1;">ApiOperation</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;首页接口&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">  home</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#032F62;"> &#39;Home Page&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ol start="2"><li>修改 src/main.ts 文件，我们需要在 Nest 应用启动后进行扫描，并输出最终的接口文档。</li></ol><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> docConfig</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> DocumentBuilder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">setTitle</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`接口文档\`</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">setVersion</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;1.0&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> document</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> SwaggerModule.</span><span style="color:#6F42C1;">createDocument</span><span style="color:#24292E;">(app, docConfig, options);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">SwaggerModule.</span><span style="color:#6F42C1;">setup</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/openapi&#39;</span><span style="color:#24292E;">, app, document, {</span></span>
<span class="line"><span style="color:#24292E;">  jsonDocumentUrl: </span><span style="color:#032F62;">\`openapi.json\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  yamlDocumentUrl: </span><span style="color:#032F62;">\`openapi.yaml\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  customfavIcon: </span><span style="color:#032F62;">&#39;/favicon.ico&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  customSiteTitle: </span><span style="color:#032F62;">\`OpenApi 接口文档\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>以上就是基本的设置，其中 DocumentBuilder 定义 OPENAPI 对象中的 info/tags 等基本信息，而 SwaggerModule 扫描应用中的路由，补全 OPENAPI 中的 paths/components 等信息，此时 document 就是一个完整的 OPENAPI 对象。而 setup 方法启动前端页面，并配置一些页面的样式和 URL 之类的信息。</p><ol start="4"><li>启动应用后，访问 <a href="http://127.0.0.1:3000/openapi" target="_blank" rel="noreferrer">http://127.0.0.1:3000/openapi</a>， 此时你应该能看到如下效果：</li></ol>`,18),i=s(`<h2 id="命令行插件" tabindex="-1">命令行插件 <a class="header-anchor" href="#命令行插件" aria-label="Permalink to &quot;命令行插件&quot;">​</a></h2><p>通常来说，你需要在每个接口相关的地方里用 @ApiXxx 装饰器标注信息，这无疑很费时间。于是，@nestjs/swagger 内置有命令行插件，帮助你从自动收集这些信息而不是手动标注，使用方式如下：</p><ol><li>修改根目录下的 nest-cli.json 文件，这是 Nest CLI 的配置文件将。 将 @nestjs/swagger 作为插件传入编译选项中，支持传递参数。</li></ol><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#005CC5;">  &quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#005CC5;">    &quot;plugins&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#005CC5;">        &quot;name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;@nestjs/swagger&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#005CC5;">        &quot;options&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#005CC5;">          &quot;dtoFileNameSuffix&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;.vo.ts&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;.dto.ts&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;.entity.ts&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#005CC5;">          &quot;introspectComments&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ol start="2"><li>回到 src/app.controller.ts 文件中，把 @ApiResponse 装饰器去掉，改为注释。</li></ol><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> AppController</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * 首页接口(插件)</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#6F42C1;">  home</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#032F62;"> &#39;Home Page&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ol start="3"><li>等待重新编译，再次访问效果是一样的。</li></ol><h2 id="包装响应结果" tabindex="-1">包装响应结果 <a class="header-anchor" href="#包装响应结果" aria-label="Permalink to &quot;包装响应结果&quot;">​</a></h2><p>在国内，我们通常会把响应数据包装成 { code, message, data } 的格式再返回。在 NestJS 中，通常通过拦截器进行包装，但 Swagger 并不知道指这点，输出的依旧是原始数据类型。那么，有没有办法给 swagger 中的每个响应都包装一层结构呢？有，记得前面的 document 对象吗，他是一个 OPENAPI 对象，我们可以手动修改而达到目的。</p><p>废话不多说直接贴代码，有兴趣的可以自己研究下：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> addResponseWrapper</span><span style="color:#24292E;">(</span><span style="color:#E36209;">doc</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> OpenAPIObject</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> path</span><span style="color:#D73A49;"> of</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">(doc.paths)) {</span></span>
<span class="line"><span style="color:#D73A49;">    const</span><span style="color:#005CC5;"> pathItem</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> doc.paths[path];</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">pathItem) {</span></span>
<span class="line"><span style="color:#D73A49;">      continue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#D73A49;">    for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> method</span><span style="color:#D73A49;"> of</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">(pathItem)) {</span></span>
<span class="line"><span style="color:#D73A49;">      const</span><span style="color:#005CC5;"> responses</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> doc.paths[path][method].responses;</span></span>
<span class="line"><span style="color:#D73A49;">      if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">responses) {</span></span>
<span class="line"><span style="color:#D73A49;">        continue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#D73A49;">      for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> status</span><span style="color:#D73A49;"> of</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">(responses)) {</span></span>
<span class="line"><span style="color:#D73A49;">        const</span><span style="color:#005CC5;"> json</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> responses[status].content?.[</span><span style="color:#032F62;">&#39;application/json&#39;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">        if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">json) {</span></span>
<span class="line"><span style="color:#24292E;">          responses[status].content </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#032F62;">            &#39;application/json&#39;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">              schema: {</span></span>
<span class="line"><span style="color:#24292E;">                $ref: </span><span style="color:#032F62;">&#39;#/components/schemas/Response&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">              },</span></span>
<span class="line"><span style="color:#24292E;">            },</span></span>
<span class="line"><span style="color:#24292E;">          };</span></span>
<span class="line"><span style="color:#D73A49;">          continue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#D73A49;">        const</span><span style="color:#005CC5;"> schema</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> json.schema;</span></span>
<span class="line"><span style="color:#24292E;">        json.schema </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          allOf: [</span></span>
<span class="line"><span style="color:#24292E;">            {</span></span>
<span class="line"><span style="color:#24292E;">              $ref: </span><span style="color:#032F62;">&#39;#/components/schemas/Response&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            },</span></span>
<span class="line"><span style="color:#24292E;">            {</span></span>
<span class="line"><span style="color:#24292E;">              type: </span><span style="color:#032F62;">&#39;object&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">              properties: {</span></span>
<span class="line"><span style="color:#24292E;">                data: schema,</span></span>
<span class="line"><span style="color:#24292E;">              },</span></span>
<span class="line"><span style="color:#24292E;">              required: [</span><span style="color:#032F62;">&#39;data&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">            },</span></span>
<span class="line"><span style="color:#24292E;">          ],</span></span>
<span class="line"><span style="color:#24292E;">        };</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  doc.components.schemas.Response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    type: </span><span style="color:#032F62;">&#39;object&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    properties: {</span></span>
<span class="line"><span style="color:#24292E;">      code: {</span></span>
<span class="line"><span style="color:#24292E;">        type: </span><span style="color:#032F62;">&#39;integer&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        description: </span><span style="color:#032F62;">&#39;状态码&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        example: </span><span style="color:#005CC5;">2000</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        format: </span><span style="color:#032F62;">&#39;int32&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">      message: {</span></span>
<span class="line"><span style="color:#24292E;">        type: </span><span style="color:#032F62;">&#39;string&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        description: </span><span style="color:#032F62;">&#39;提示信息&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        example: </span><span style="color:#032F62;">&#39;请求成功&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    required: [</span><span style="color:#032F62;">&#39;code&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;message&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> doc;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后，把上面的这行代码：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> document</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> SwaggerModule.</span><span style="color:#6F42C1;">createDocument</span><span style="color:#24292E;">(app, docConfig, options);</span></span></code></pre></div><p>替换为下面这行调用，重启即可看到效果</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> document</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> addResponseWrapper</span><span style="color:#24292E;">(SwaggerModule.</span><span style="color:#6F42C1;">createDocument</span><span style="color:#24292E;">(app, docConfig, options));</span></span></code></pre></div><p>其实写这段代码之前，我在网上找很久都没找到有说这方面内容的，只在官方仓库找到一条 issue ，官方的意思是不打算做，社区有做的可以以包的形式发出来。于是自己参照 OPENAPI 的结构封装了这个函数。</p><h2 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h2><p>以上，介绍个人使用 Swagger 的一些疑问探索和使用体验，如有错误还望指出。近年来，基于 OPENAPI 的生态有不少，写好 API 文档可以围绕着做很多有意思的结合。例如，根据 API 文档自动生成请求结构，生成表格/表单代码等。</p>`,18);function E(d,u,g,C,h,A){const n=p("Image");return t(),l("div",null,[y,o("p",null,[e(n,{src:c,alt:"image",class:"cursor-pointer"})]),i])}const F=a(r,[["render",E]]);export{D as __pageData,F as default};
