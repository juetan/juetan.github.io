import{_ as t,h as r,l as a,u as s,O as n,x as o,m as l,f as i}from"./chunks/framework.DZazWmmr.js";const p="/assets/image-package-description.1wE45rvM.png",c="/assets/image-package-keywords.BjQ6YaR7.png",d="/assets/image-package-files.C-lkqdgv.png",C=JSON.parse('{"title":"浅谈package.json中与打包发布相关的字段","description":"","frontmatter":{"title":"浅谈package.json中与打包发布相关的字段","date":"2023-07-21T19:00:00.000Z"},"headers":[],"relativePath":"tools/npm-package-json/index.md","filePath":"tools/npm-package-json/index.md"}'),h={name:"tools/npm-package-json/index.md"},_=n('<p>如果你要发布一个包到npm上面，package.json 是你不能忽视的配置。除了最基本的 name 和 version 字段，与打包发布相关的字段其实有不少，很多人可能不太关注，本文将试着解说下这些字段。</p><h2 id="发布相关" tabindex="-1">发布相关 <a class="header-anchor" href="#发布相关" aria-label="Permalink to &quot;发布相关&quot;">​</a></h2><p>先说说发布相关的字段：</p><h3 id="name" tabindex="-1">name <a class="header-anchor" href="#name" aria-label="Permalink to &quot;name&quot;">​</a></h3><p>必须的字段，看起来比较简单，但也有一定的命名限制：</p><ul><li>不允许有大写字母，因此常见的只有小写</li><li>不能大于214个字符</li><li>需要符合URL的规范，因为在nodejs会加入到路径中</li></ul><p>举几个合法的名称：</p><ul><li>appnify</li><li>vue-starter</li></ul><p>可以是 <code>@&lt;scope&gt;/&lt;name&gt;</code> 的格式，scope 表示某个组织或范围，name 表示具体的名字，引入的时候必须</p><h3 id="version" tabindex="-1">version <a class="header-anchor" href="#version" aria-label="Permalink to &quot;version&quot;">​</a></h3><p>遵循 <a href="https://semver.org/lang/zh-CN/" target="_blank" rel="noreferrer">Semver</a> 规范，通常是 <code>&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;</code> 的格式。其中，major表示不兼容的版本变更，minor 表示向下兼容的功能新增，patch 表示向下兼容的问题修复。</p><h3 id="description" tabindex="-1">description <a class="header-anchor" href="#description" aria-label="Permalink to &quot;description&quot;">​</a></h3><p>描述信息，比较常见的用处是在 npm 上搜索时，可以很好地辅助描述包的功能，如下：</p>',13),m=a("h3",{id:"keywords",tabindex:"-1"},[o("keywords "),a("a",{class:"header-anchor",href:"#keywords","aria-label":'Permalink to "keywords"'},"​")],-1),u=a("p",null,"关键字，光靠名字可能不是很容易传播出去，但可以让别人根据关键字搜索时传播出去，在 npm 上搜索时的效果如下：",-1),g=n(`<h3 id="files" tabindex="-1">files <a class="header-anchor" href="#files" aria-label="Permalink to &quot;files&quot;">​</a></h3><p>包含的文件，我们在发布时除了 package.json 等默认文件，可能只想发布 dist 目录，此时可以这样指定：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#005CC5;">  &quot;files&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#032F62;">    &quot;dist&quot;</span></span>
<span class="line"><span style="color:#24292E;">  ]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>举个例子，@vitejs/plugin-vue 只指定了 dist 目录，因此 src 目录没有被上传，如下：</p>`,4),k=a("h2",{id:"联系相关",tabindex:"-1"},[o("联系相关 "),a("a",{class:"header-anchor",href:"#联系相关","aria-label":'Permalink to "联系相关"'},"​")],-1),f=a("h3",{id:"author",tabindex:"-1"},[o("author "),a("a",{class:"header-anchor",href:"#author","aria-label":'Permalink to "author"'},"​")],-1);function b(v,x,q,j,y,P){const e=l("Image");return i(),r("div",null,[_,a("p",null,[s(e,{src:p,alt:"image",class:"cursor-pointer"})]),m,u,a("p",null,[s(e,{src:c,alt:"image",class:"cursor-pointer"})]),g,a("p",null,[s(e,{src:d,alt:"image",class:"cursor-pointer"})]),k,f])}const S=t(h,[["render",b]]);export{C as __pageData,S as default};
