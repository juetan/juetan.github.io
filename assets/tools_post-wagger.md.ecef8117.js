import{_ as o,I as p,o as e,c as t,k as n,M as l,W as s}from"./chunks/framework.6aa3b0fe.js";const c="/assets/image-swagger.196c2f42.png",r="/assets/image-swagger1.8082ed5a.png",D=JSON.parse('{"title":"NestJS系列：使用swagger生成路由文档及进阶用法","description":"","frontmatter":{"title":"NestJS系列：使用swagger生成路由文档及进阶用法","date":"2023-08-07T00:00:00.000Z"},"headers":[],"relativePath":"tools/post-wagger.md","filePath":"tools/post-wagger.md"}'),y={name:"tools/post-wagger.md"},i=s(`<p>在 NestJS 中用上 Swagger 是比较简单的，但搜了一圈下来讲进阶用法的好像没多少，最近在用这个时发现了一些好玩的功能，在这里记录下。</p><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><p>NestJS 提供有 swagger 模块，按官方文档安装就行。</p><ol><li>安装依赖</li></ol><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-light"><code><span class="line"><span style="color:#6F42C1;">pnpm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">i</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@nestjs/swagger</span></span></code></pre></div><ol start="2"><li>新增 <code>src/common/swagger/index.ts</code> 文件(个人习惯，直接在 <code>src/main.ts</code> 文件中使用也行)</li></ol><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initSwagger</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">app</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">INestApplication</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">docConfig</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DocumentBuilder</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">setTitle</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`接口文档\`</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">setVersion</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;1.0&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">setDescription</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Openapi 3.0文档&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">setExternalDoc</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;JSON数据&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">\`openapi.json\`</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">addTag</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;user&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;用户管理&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">addTag</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;auth&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;认证管理&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">addTag</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;role&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;角色管理&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">addTag</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;permission&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;权限管理&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">addTag</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;post&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;文章管理&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">addTag</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;upload&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;文件上传&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">addBearerAuth</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">document</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SwaggerModule.</span><span style="color:#6F42C1;">createDocument</span><span style="color:#24292E;">(app, docConfig, options);</span></span>
<span class="line"><span style="color:#24292E;">  SwaggerModule.</span><span style="color:#6F42C1;">setup</span><span style="color:#24292E;">(config.apiDocPrefix, app, document, {</span></span>
<span class="line"><span style="color:#24292E;">    jsonDocumentUrl: </span><span style="color:#032F62;">\`openapi.json\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    yamlDocumentUrl: </span><span style="color:#032F62;">\`openapi.yaml\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    customfavIcon: </span><span style="color:#032F62;">&#39;/favicon.ico&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    customSiteTitle: </span><span style="color:#032F62;">\`OpenApi 接口文档\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>上面包含两个部分，其中 <code>new DocumentBuilder</code> 是构建 OpenApi 文档对象的基本参数，上面设置的参数对应如下：</p>`,8),E=s(`<p>在 <code>SwaggerModule.setup</code> 函数中，我们传入了一些自定义参数，主要是定义页面的路径，图标和标题等内容：</p><ul><li>jsonDocumentUrl: 默认访问json格式数据的路径是 openapi-json, 这里修改为 openapi.json 更易于理解些</li><li>yamlDocumentUrl: 访问 YAML 格式数据的路径，同上</li><li>customfavIcon: 站点图标</li><li>customSiteTitle: 站点标题</li></ul><ol start="3"><li>在 <code>src/main.ts</code> 中引用即可</li></ol><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">app</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> NestFactory.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">initSwagger</span><span style="color:#24292E;">(app);</span></span></code></pre></div><ol start="3"><li>在 <code>src/app.controller.ts</code> 中，使用装饰器试下</li></ol><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserController</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#6F42C1;">ApiOperation</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;首页接口&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">home</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Home Page&#39;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ol start="4"><li>等待重启后，访问 <a href="http://127.0.0.1:3000" target="_blank" rel="noreferrer">http://127.0.0.1:3000</a> 应该能看到如下效果：</li></ol>`,7),d=s(`<h2 id="命令行插件" tabindex="-1">命令行插件 <a class="header-anchor" href="#命令行插件" aria-label="Permalink to &quot;命令行插件&quot;">​</a></h2><p>以上就是基本用法，但一个接口通常包含很多很多内容，例如路径参数，查询参数，body参数、请求头和响应数据等类型定义，在控制器方法周围写满 <code>@ApiXxx</code> 等装饰器是比较麻烦的。另外，我们已经用 Typescript 定义类型，却还要用装饰器再写一遍，例如：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AppController</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#6F42C1;">ApiResponse</span><span style="color:#24292E;">({ type: String })</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">home</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;hello, world&#39;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>home</code> 方法已经用 Typescript 标注返回的是 string，我们还要用 <code>@ApiResponse</code> 再标注一遍，显然有点重复。基于以上，官方提供了一个脚手架插件，能在 typescript 编译为 JavaScript 时，根据 TypeScript 的元数据反射系统帮助我们收集这些类型数据，从而转为 swagger 文档的数据。话不多说，先来看下效果：</p><ol><li>编辑根目录下的 <code>nest-cli.json</code> 文件，将 <code>@nestjs/swagger</code> 作为插件传入编译选项中。</li></ol><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;plugins&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;@nestjs/swagger&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;options&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">&quot;dtoFileNameSuffix&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;.vo.ts&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;.dto.ts&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;.entity.ts&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">&quot;introspectComments&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ol start="2"><li>回到 <code>src/app.controller.ts</code> 文件中，把 <code>@ApiResponse</code> 装饰器去掉。</li></ol><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-light"><code><span class="line"><span style="color:#24292e;">xxx</span></span></code></pre></div><ol start="3"><li>等待重新编译，再次访问效果是一样的。</li></ol>`,9);function g(u,C,_,F,m,h){const a=p("Image");return e(),t("div",null,[i,n("p",null,[l(a,{src:c,class:"cursor-pointer"})]),E,n("p",null,[l(a,{src:r,class:"cursor-pointer"})]),d])}const T=o(y,[["render",g]]);export{D as __pageData,T as default};
