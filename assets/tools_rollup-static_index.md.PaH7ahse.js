import{_ as e,E as o,c as r,k as s,J as a,a as p,S as l,o as t}from"./chunks/framework.3EKbrk2Y.js";const c="/assets/image-dir.x4A8fKLl.png",i="/assets/image-dist.qOotuNoq.png",y="/assets/image-file-url.ruL9QBpV.png",b="/assets/image-import-meta.zVDbq9MD.png",T=JSON.parse('{"title":"编写Rollup插件：如何生成静态资源并在运行中获取到对应资源","description":"","frontmatter":{"title":"编写Rollup插件：如何生成静态资源并在运行中获取到对应资源","date":"2023-10-20T17:59:00.000Z"},"headers":[],"relativePath":"tools/rollup-static/index.md","filePath":"tools/rollup-static/index.md"}'),u={name:"tools/rollup-static/index.md"},m=s("p",null,"自从 Vite 3 发布起，就开始用它做了不少实践和项目，Vite 的底层是 Rollup 和 Esbuild。Rollup 主要用在打包阶段，今天记录下 Rollup 对于静态资源是如何处理，以及 resolveImportMeta 和 resolveFileUrl 两个钩子的使用。",-1),d=s("h2",{id:"准备工作",tabindex:"-1"},[p("准备工作 "),s("a",{class:"header-anchor",href:"#准备工作","aria-label":'Permalink to "准备工作"'},"​")],-1),E=s("p",null,"新建个项目，安装 rollup 和 tsx 作为开发依赖即可，其中 tsx 是个命令行工具(类似ts-node)，可以运行 .ts 文件。此外，创建目录结构如下：",-1),h=l(`<p>其中：</p><table><thead><tr><th>文件</th><th>说明</th></tr></thead><tbody><tr><td>index.ts</td><td>作为 Rollup 打包的入口</td></tr><tr><td>asset-plugin.ts</td><td>我们编写的 Rollup 插件</td></tr><tr><td>src/index.js</td><td>打包入口文件，会引用到 image.png 文件</td></tr><tr><td>src/image.png</td><td>图片文件</td></tr></tbody></table><h2 id="入口代码" tabindex="-1">入口代码 <a class="header-anchor" href="#入口代码" aria-label="Permalink to &quot;入口代码&quot;">​</a></h2><p>修改 src/index.ts 文件，引入 .png 并打印其内容，如下：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#6A737D;">// @ts-ignore</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> AImage </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &#39;./image.png&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> run</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(AImage);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">run</span><span style="color:#24292E;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="小小插件" tabindex="-1">小小插件 <a class="header-anchor" href="#小小插件" aria-label="Permalink to &quot;小小插件&quot;">​</a></h2><p>修改 asset-plugin.ts 文件写个生成静态产物的小插件，主要将 .png 文件用作 URL 使用，如下：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Plugin } </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &#39;rollup&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> path </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &#39;path&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> fs </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &#39;fs&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> const</span><span style="color:#6F42C1;"> assetPlugin</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> ()</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> Plugin</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&#39;rollup:asset&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6F42C1;">    resolveId</span><span style="color:#24292E;">(</span><span style="color:#E36209;">id</span><span style="color:#24292E;">, </span><span style="color:#E36209;">importer</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">      if</span><span style="color:#24292E;"> (id.</span><span style="color:#6F42C1;">endsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;.png&#39;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#D73A49;">        const</span><span style="color:#005CC5;"> filePath</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(path.</span><span style="color:#6F42C1;">dirname</span><span style="color:#24292E;">(importer), id);</span></span>
<span class="line"><span style="color:#D73A49;">        return</span><span style="color:#24292E;"> filePath;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#6F42C1;">    load</span><span style="color:#24292E;">(</span><span style="color:#E36209;">id</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">      if</span><span style="color:#24292E;"> (id.</span><span style="color:#6F42C1;">endsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;.png&#39;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#D73A49;">        const</span><span style="color:#005CC5;"> assetId</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">emitFile</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">          type: </span><span style="color:#032F62;">&#39;asset&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          name: path.</span><span style="color:#6F42C1;">basename</span><span style="color:#24292E;">(id),</span></span>
<span class="line"><span style="color:#24292E;">          source: fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(id),</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#D73A49;">        const</span><span style="color:#005CC5;"> key</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> \`ROLLUP_FILE_URL_\${</span><span style="color:#24292E;">assetId</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">        return</span><span style="color:#032F62;"> \`export default import.meta.\${</span><span style="color:#24292E;">key</span><span style="color:#032F62;">};\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>以上，在解析(resolveId)到 .png 结尾的模块时返回文件路径，在加载(load)时产出一个静态资源文件，并通过特殊的 ROLLUP_FILE_URL_ID 告诉 Rollup 当作文件URL处理。</p><h2 id="打包代码" tabindex="-1">打包代码 <a class="header-anchor" href="#打包代码" aria-label="Permalink to &quot;打包代码&quot;">​</a></h2><p>修改 index.ts 文件，以 api 的形式调用 rollup 进行打包，记得引入写好的插件和指定正确的入口路径，如下：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { rollup } </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &#39;rollup&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { assetPlugin } </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &#39;./asset-plugin.ts&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> run</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> async</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> bundle</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> await</span><span style="color:#6F42C1;"> rollup</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    input: </span><span style="color:#032F62;">&#39;src/index.js&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    output: {},</span></span>
<span class="line"><span style="color:#24292E;">    plugins: [</span><span style="color:#6F42C1;">assetPlugin</span><span style="color:#24292E;">()],</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#D73A49;">  await</span><span style="color:#24292E;"> bundle.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">({ dir: </span><span style="color:#032F62;">&#39;dist&#39;</span><span style="color:#24292E;"> });</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">run</span><span style="color:#24292E;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="运行打包" tabindex="-1">运行打包 <a class="header-anchor" href="#运行打包" aria-label="Permalink to &quot;运行打包&quot;">​</a></h2><p>运行 <code>npx tsx ./index.ts</code> 命令，不出意外的话会能看到生成产物和执行结果如下：</p>`,14),g=l(`<h2 id="钩子-resolvefileurl" tabindex="-1">钩子：resolveFileUrl <a class="header-anchor" href="#钩子-resolvefileurl" aria-label="Permalink to &quot;钩子：resolveFileUrl&quot;">​</a></h2><p>以上，默认生成的是 new URL 形式的内容，我们可以通过 resolveFileUrl 钩子进行重写，修改 asset-plugin.ts 文件添加钩子如下：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> const</span><span style="color:#6F42C1;"> assetPlugin</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> ()</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> Plugin</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // ...</span></span>
<span class="line"><span style="color:#6F42C1;">    resolveFileUrl</span><span style="color:#24292E;">({ </span><span style="color:#E36209;">fileName</span><span style="color:#24292E;"> }) {</span></span>
<span class="line"><span style="color:#D73A49;">      return</span><span style="color:#032F62;"> \`&#39;MODIFY:\${</span><span style="color:#24292E;">fileName</span><span style="color:#032F62;">}&#39;\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>重新打包，最终产物如下：</p>`,4),A=l(`<h2 id="钩子-resolveimportmeta" tabindex="-1">钩子：resolveImportMeta <a class="header-anchor" href="#钩子-resolveimportmeta" aria-label="Permalink to &quot;钩子：resolveImportMeta&quot;">​</a></h2><p>前面可以看到 export 的是 import.meta.xx 格式，除了 Rollup 内置的 File URL，我们也可以自定义 import.meta.xx 的内容，同样修改 asset-plugin.ts 文件添加钩子如下：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> const</span><span style="color:#6F42C1;"> assetPlugin</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> ()</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> Plugin</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // ...</span></span>
<span class="line"><span style="color:#6F42C1;">    resolveImportMeta</span><span style="color:#24292E;">(</span><span style="color:#E36209;">property</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">      if</span><span style="color:#24292E;"> (property </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &#39;demo&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">        return</span><span style="color:#032F62;"> \`&#39;MODIFY:demo&#39;\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>然后修改 src/index.js 文件，添加额外的内容如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#6A737D;">// @ts-ignore</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> AImage </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &#39;./image.png&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// @ts-ignore</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> demo</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> import</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">meta</span><span style="color:#24292E;">.demo;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> run</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(AImage);</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(demo);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">run</span><span style="color:#24292E;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>重新打包，最终如下：</p>`,6),_=s("h2",{id:"最后",tabindex:"-1"},[p("最后 "),s("a",{class:"header-anchor",href:"#最后","aria-label":'Permalink to "最后"'},"​")],-1),D=s("p",null,"以上。",-1);function C(F,v,f,x,P,I){const n=o("Image");return t(),r("div",null,[m,d,E,s("p",null,[a(n,{src:c,alt:"image",class:"cursor-pointer"})]),h,s("p",null,[a(n,{src:i,alt:"image",class:"cursor-pointer"})]),g,s("p",null,[a(n,{src:y,alt:"image",class:"cursor-pointer"})]),A,s("p",null,[a(n,{src:b,alt:"image",class:"cursor-pointer"})]),_,D])}const k=e(u,[["render",C]]);export{T as __pageData,k as default};
