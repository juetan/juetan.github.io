import{_ as a,E as l,c as p,k as s,J as e,S as o,a as t,o as r}from"./chunks/framework.3EKbrk2Y.js";const c="/assets/image.5lD7MMzS.png",v=JSON.parse('{"title":"SSE：使用 Server-Sent Events 接收服务器通知","description":"","frontmatter":{"title":"SSE：使用 Server-Sent Events 接收服务器通知","date":"2024-01-23T13:00:00.000Z"},"headers":[],"relativePath":"tools/sse/index.md","filePath":"tools/sse/index.md"}'),y={name:"tools/sse/index.md"},i=o(`<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Server-sent_events" target="_blank" rel="noreferrer">SSE</a>，即 Server-Sent Events(服务器发送事件)，是一项用于服务端向客户端推送消息的技术。目前，接收服务器消息比较常用的技术是 HTTP 轮询 和 WebSocket，SSE 少被使用的原因猜测是 IE 浏览器不支持。</p><p>关注到这个技术，主要是之前做推送的时候用的都是 WebSocket，但目的也仅仅是接收更新通知，调用接口接收更新数据。于是想搜下有哪些可以接收消息的技术。SSE 看起来正好符合需求，于是学习下说不定日后能用上，这里记录下。</p><h2 id="基本原理" tabindex="-1">基本原理 <a class="header-anchor" href="#基本原理" aria-label="Permalink to &quot;基本原理&quot;">​</a></h2><p>本质上基于 HTTP 协议实现，HTTP 在 1.1 版本实现了长连接(keep-alive)，利用该能力可以长时间推送流而不断开连接。SSE 推送的是文本流，且只能服务端向客户端推送，客户端无法向服务端发消息，文本流遵循一定格式。浏览器对 SSE 做了特殊处理，支持自动重连，这是 websocket 所不具备的能力。</p><p>接下来，使用 express 写个 demo 实践一下，主要包含以下两个文件：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-light vp-code"><code><span class="line"><span>.</span></span>
<span class="line"><span>├── index.html</span></span>
<span class="line"><span>└── server.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="服务端" tabindex="-1">服务端 <a class="header-anchor" href="#服务端" aria-label="Permalink to &quot;服务端&quot;">​</a></h2><p>服务端代码写在 server.js 文件中，比较简单，直接贴上来。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> express </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &#39;express&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> fs </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &#39;fs&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> app</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> express</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> html</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./index.html&#39;</span><span style="color:#24292E;">, { encoding: </span><span style="color:#032F62;">&#39;utf8&#39;</span><span style="color:#24292E;"> });</span></span>
<span class="line"><span style="color:#24292E;">  res.</span><span style="color:#6F42C1;">header</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;content-type&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;text/html&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  res.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">(html);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/sse&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  res.</span><span style="color:#6F42C1;">header</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;connection&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;keep-alive&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  res.</span><span style="color:#6F42C1;">header</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;content-type&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;text/event-stream&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  res.</span><span style="color:#6F42C1;">header</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;cache-control&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;no-cache&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">  let</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">  setInterval</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    num </span><span style="color:#D73A49;">+=</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">    const</span><span style="color:#005CC5;"> time</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Date</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">toISOString</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">    const</span><span style="color:#005CC5;"> data</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> { num, message: time };</span></span>
<span class="line"><span style="color:#D73A49;">    const</span><span style="color:#005CC5;"> text</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> \`data: \${</span><span style="color:#005CC5;">JSON</span><span style="color:#032F62;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#032F62;">(</span><span style="color:#24292E;">data</span><span style="color:#032F62;">)</span><span style="color:#032F62;">}</span><span style="color:#005CC5;">\\n\\n</span><span style="color:#032F62;">\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    res.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(text);</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`[\${</span><span style="color:#24292E;">num</span><span style="color:#032F62;">}]: 已发送消息\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }, </span><span style="color:#005CC5;">2000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">8080</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`listening on: http://127.0.0.1:8080\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><p>以上，服务端有一些规则，如下：</p><h3 id="响应头" tabindex="-1">响应头 <a class="header-anchor" href="#响应头" aria-label="Permalink to &quot;响应头&quot;">​</a></h3><p>有 3 个响应头是固定且必须的：</p><ul><li>connect：使用长连接</li><li>content-type: 表示内容为文本流</li><li>cache-control: 不缓存</li></ul><h3 id="文本流格式" tabindex="-1">文本流格式 <a class="header-anchor" href="#文本流格式" aria-label="Permalink to &quot;文本流格式&quot;">​</a></h3><p>每次发送的都是文本，文本遵循一定格式：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-light vp-code"><code><span class="line"><span>&lt;field&gt;:&lt;content&gt;\\n</span></span>
<span class="line"><span>&lt;field&gt;:&lt;content&gt;\\n\\n</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>可以单行或多行，每行以 <code>\\n</code> 结尾，最后一行以 <code>\\n\\n</code> 结尾。其中 field 有以下几个值可选：</p><ul><li>data</li><li>event</li><li>id</li><li>retry</li></ul><p>content 需为 utf8 格式的文本。代码中，我们将包含 num 和 message 的对象序列化后发送。</p><h3 id="发送流" tabindex="-1">发送流 <a class="header-anchor" href="#发送流" aria-label="Permalink to &quot;发送流&quot;">​</a></h3><p>使用 res.write 方法，而不是 res.send 或 res.end 方法，前者会写入流而不关闭，后者会关闭连接。</p><h2 id="客户端" tabindex="-1">客户端 <a class="header-anchor" href="#客户端" aria-label="Permalink to &quot;客户端&quot;">​</a></h2><p>客户端代码写在 index.html 中，代码也比较简单，直接贴上来。</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#24292E;">&lt;!</span><span style="color:#22863A;">DOCTYPE</span><span style="color:#6F42C1;"> html</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">html</span><span style="color:#6F42C1;"> lang</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;en&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">meta</span><span style="color:#6F42C1;"> charset</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;UTF-8&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">meta</span><span style="color:#6F42C1;"> http-equiv</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;X-UA-Compatible&quot;</span><span style="color:#6F42C1;"> content</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;IE=edge&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">meta</span><span style="color:#6F42C1;"> name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;viewport&quot;</span><span style="color:#6F42C1;"> content</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">title</span><span style="color:#24292E;">&gt;SSE&lt;/</span><span style="color:#22863A;">title</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    来自 SSE 的消息：</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">ol</span><span style="color:#6F42C1;"> id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;list&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">ol</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">    const</span><span style="color:#005CC5;"> source</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> EventSource</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/sse&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    source.</span><span style="color:#6F42C1;">onopen</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;打开连接&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    source.</span><span style="color:#6F42C1;">onmessage</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">      const</span><span style="color:#005CC5;"> data</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(event.data);</span></span>
<span class="line"><span style="color:#D73A49;">      let</span><span style="color:#24292E;"> li </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;li&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      li.innerHTML </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data.message;</span></span>
<span class="line"><span style="color:#24292E;">      document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;list&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">appendChild</span><span style="color:#24292E;">(li);</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    source.</span><span style="color:#6F42C1;">onerror</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`生成异常，状态：\${</span><span style="color:#24292E;">source</span><span style="color:#032F62;">.</span><span style="color:#24292E;">readyState</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p>以上，使用方式类似于 websocket。</p><h2 id="运行效果" tabindex="-1">运行效果 <a class="header-anchor" href="#运行效果" aria-label="Permalink to &quot;运行效果&quot;">​</a></h2><p>使用 <code>node ./server.js</code> 启动服务后，访问效果如下：</p>`,27),b=s("h2",{id:"结语",tabindex:"-1"},[t("结语 "),s("a",{class:"header-anchor",href:"#结语","aria-label":'Permalink to "结语"'},"​")],-1),E=s("p",null,"ChatGPT 网页版使用的就是 SSE 进行对话，验证了 SSE 尚有一定的使用场景。相比于 WebSocket，SSE 适合一些比较轻量的使用场景，后续会看看有没有机会用上。",-1);function u(m,d,h,C,F,g){const n=l("Image");return r(),p("div",null,[i,s("p",null,[e(n,{src:c,alt:"image",class:"cursor-pointer"})]),b,E])}const S=a(y,[["render",u]]);export{v as __pageData,S as default};
