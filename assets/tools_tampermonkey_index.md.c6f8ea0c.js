import{_ as e,I as o,o as r,c,k as s,M as a,W as p,a as l}from"./chunks/framework.45d8ea02.js";const t="/assets/image-auto-install.8d358938.png",i="/assets/image-export-json.53307b69.png",y="/assets/image-manage.ae3422fc.png",w=JSON.parse('{"title":"开发油猴脚本：在Iconfont项目中导出符合unocss图标格式的JSON文件","description":"","frontmatter":{"title":"开发油猴脚本：在Iconfont项目中导出符合unocss图标格式的JSON文件","date":"2023-10-09T11:03:00.000Z"},"headers":[],"relativePath":"tools/tampermonkey/index.md","filePath":"tools/tampermonkey/index.md"}'),u={name:"tools/tampermonkey/index.md"},b=p(`<p>Tampermonkey(油猴，最近插件的名字好像改为篡改猴)，是一款浏览器插件。其主要功能在于管理和应用社区中的脚本，使用油猴而不是浏览器插件，主要在于便利性和自由性。</p><p>举个例子，在谷歌浏览器中使用开发者身份上架插件是要收费的(5 刀)，使用油猴就完全不用担心。此外，插件包含敏感功能很容易被举报下架，使用油猴可以不用担心。事实上油猴相关的社区，包含非常多容易被和谐的功能，例如 CSDN 去广告去限制，B 站会员视频破解等功能。</p><h2 id="起因" tabindex="-1">起因 <a class="header-anchor" href="#起因" aria-label="Permalink to &quot;起因&quot;">​</a></h2><p>最近在做素材管理的功能，想找个文件的图标集，在 iconify 中搜了一圈没找到满意的，然后在 iconfont 中找到一套不错的，于是想着下载下来作为 unocss 的自定义图标集。但 iconfont 并没有提供类似的服务，搜索一番后谷歌到一套方案(<a href="https://github.com/yee94/tampermonkey-iconfont-iconify" target="_blank" rel="noreferrer">https://github.com/yee94/tampermonkey-iconfont-iconify</a>)，遗憾的是效果不太理想。不过翻看源码后，发现实现起来比较简单，于是决定自己重新写个脚本。</p><h2 id="油猴脚本" tabindex="-1">油猴脚本 <a class="header-anchor" href="#油猴脚本" aria-label="Permalink to &quot;油猴脚本&quot;">​</a></h2><p>先简单了解下油猴的概念：一个油猴脚本是以 .user.js 结尾的 JavaScript 文件，里面包含顶部注释和主体代码两部分内容，示例如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light"><code><span class="line"><span style="color:#6A737D;">// ==UserScript==</span></span>
<span class="line"><span style="color:#6A737D;">// @name         server:Appnify</span></span>
<span class="line"><span style="color:#6A737D;">// @version      0.0.0</span></span>
<span class="line"><span style="color:#6A737D;">// @description  A vite based tampermonkey starter</span></span>
<span class="line"><span style="color:#6A737D;">// @match        *://*/*</span></span>
<span class="line"><span style="color:#6A737D;">// @grant        GM.openInTab</span></span>
<span class="line"><span style="color:#6A737D;">// @resource     mycss  https://a.com/a.css</span></span>
<span class="line"><span style="color:#6A737D;">// ==/UserScript==</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">;(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;hello, world&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">})();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>以上，顶部注释遵循特殊格式，充当配置的功能，name/version/description 这类常见的配置就不详细介绍了，主要说说几个特殊的注释：</p><ul><li>@match 匹配的地址，该脚本仅在匹配的地址中生效</li><li>@grant 申请的权限，部分功能需要线申请才能使用，例如打开新的选项卡</li><li>@resorce 依赖的资源，资源可以是图片、样式或视频，每个资源都需要有名字，然后在脚本中可以通过 GM.getResourceUrl 等方法拿到</li><li>@require 依赖的脚本，脚本指其他 .js 文件，可以在脚本之前加载，例如 jquery</li></ul><p>主体代码，运行在沙箱环境中，可以访问 document 和其他原生接口。值得注意的是：window 变量是特殊的沙箱变量，不是页面中的全局对象；如果要访问页面的全局变量，需先通过 <code>@grant unsafeWindow</code> 获取到权限，然后在脚本中通过 <code>unfaseWindow</code> 变量使用，如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light"><code><span class="line"><span style="color:#6A737D;">// ==UserScript==</span></span>
<span class="line"><span style="color:#6A737D;">// @grant        unsafeWindow</span></span>
<span class="line"><span style="color:#6A737D;">// ==/UserScript==</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">;(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// __APP_USERNAME__ 是页面中的全局变量</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">username</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> unsafaeWindow.__APP_USERNAME__;</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(username)</span></span>
<span class="line"><span style="color:#24292E;">})();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>沙箱有很好的隔离作用，同时也有不少好处。例如，在页面中使用 Xhr/Fetch 发起跨域请求通常会被浏览器拦截，通过 <code>@grant GM.xmlHttpRequest</code> 申请到的方法，就可以利用插件的作用域避开这个问题。</p><p>此外，在浏览器中打开任意以 .user.js 结尾的 URL(当然，格式要符合) 都会自动跳转到油猴的安装页面。而 vite-plugin-monkey 也正是利用这点来启动开发，截个图如下：</p>`,13),d=p(`<h2 id="创建项目" tabindex="-1">创建项目 <a class="header-anchor" href="#创建项目" aria-label="Permalink to &quot;创建项目&quot;">​</a></h2><p>开发油猴可以手搓但没有必要，使用 vite-plugin-monkey 插件可以达到很好的开发体验。</p><ol><li>创建项目，基于 vite-plugin-monkey 提供的命令行工具创建一个项目，我这里选的是 vue-ts 模板。</li></ol><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">create</span><span style="color:#24292E;"> </span><span style="color:#032F62;">monkey</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="2"><li>安装必要的依赖(如下)。注意：这些依赖仅作为开发使用，打包使用的还是 CDN 资源，这样做是为了减少脚本的体积。</li></ol><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@vitejs/plugin-vue-jsx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@arco-design/web-vue</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-D</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="2"><li>其他配置就不多说了，这里主要说下第三方库的外置。例如下面，主要用到了 Vue 和 @arco-design/web-vue 库，打包时没必要加入到产物中，可以使用油猴的 @resource/@require 进行CDN加速。</li></ol><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light"><code><span class="line"><span style="color:#6A737D;">// vite.config.ts</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineConfig</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  plugins: [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">monkey</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      build: {</span></span>
<span class="line"><span style="color:#24292E;">        externalGlobals: {</span></span>
<span class="line"><span style="color:#24292E;">          vue: cdn.</span><span style="color:#6F42C1;">unpkg</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Vue&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;dist/vue.global.prod.js&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> util.</span><span style="color:#6F42C1;">fn2dataUrl</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6A737D;">// @ts-ignore</span></span>
<span class="line"><span style="color:#24292E;">              window.Vue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Vue;</span></span>
<span class="line"><span style="color:#24292E;">            })</span></span>
<span class="line"><span style="color:#24292E;">          ),</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&#39;@arco-design/web-vue&#39;</span><span style="color:#24292E;">: cdn.</span><span style="color:#6F42C1;">unpkg</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;ArcoVue&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;dist/arco-vue.min.js&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        externalResource: {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&#39;@arco-design/web-vue/dist/arco.css&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;https://unpkg.com/@arco-design/web-vue@2.52.0/dist/arco.css&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">    }),</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>最终会生成的如下的油猴注释，其中包的版本跟随 package.json 中对应包的版本。值得注意的是：arco-design 依赖 Vue，但 Vue 的 iife 版本在油猴中导入时无法成为全局变量，于是需要通过 <code>window.Vue = Vue</code> 进行手动补全。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light"><code><span class="line"><span style="color:#6A737D;">// @require      https://unpkg.com/vue@3.3.4/dist/vue.global.prod.js</span></span>
<span class="line"><span style="color:#6A737D;">// @require      data:application/javascript,window.Vue%3DVue%3B</span></span>
<span class="line"><span style="color:#6A737D;">// @require      https://unpkg.com/@arco-design/web-vue@2.52.0/dist/arco-vue.min.js</span></span>
<span class="line"><span style="color:#6A737D;">// @resource     @arco-design/web-vue/dist/arco.css  https://unpkg.com/@arco-design/web-vue@2.52.0/dist/arco.css</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="开发脚本" tabindex="-1">开发脚本 <a class="header-anchor" href="#开发脚本" aria-label="Permalink to &quot;开发脚本&quot;">​</a></h2><p>在 Iconfont 的项目管理页面，当前 URL 中有个名为 projectId 的查询参数，通过接口 <code>api/project/detail.json?pid=\${projectId}</code> 可以拿到具体的JSON数据，拿到后做数据转换即可，主要如下：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getDetailJSON</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">pid</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URLSearchParams</span><span style="color:#24292E;">(location.search).</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;projectId&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">pid) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Errot</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;项目ID不存在&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">url</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`/api/project/detail.json?pid=\${</span><span style="color:#24292E;">pid</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">res</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;">(url);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">data</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> res.</span><span style="color:#6F42C1;">json</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (data.code </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">(data.message);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">result</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> { show_svg, font_class } </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> data.data.icons) {</span></span>
<span class="line"><span style="color:#24292E;">    show_svg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> show_svg.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;currentColor&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;transparent&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    result[font_class] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> show_svg;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>拿到数据之后，可以导出为JSON文件，主要思路如下：对象通过 JSON.stringnify 转为字符串，然后通过 encodeURIComponent 进行编码，再添加前缀补全为 dataurl 的格式，模拟 a 链接点击进行下载，如下：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">exportJSON</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">json</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">content</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">encodeURIComponent</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(json));</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dataurl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`data:text/json;charset=utf-8,\${</span><span style="color:#24292E;">content</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">a</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  a.href </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dataurl;</span></span>
<span class="line"><span style="color:#24292E;">  a.download </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;iconfont.json&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  a.</span><span style="color:#6F42C1;">click</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  a.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>以上，就是主要逻辑，目的是将当前项目的图标导出为符合 Unocss presetIocns 自定义图标集的JSON文件。其他边缘细节就不具体展示了，最后贴个效果图如下：</p>`,16),E=s("p",null,"除以上外，也可以根据自身喜好进行扩展，例如做个内置的管理弹窗，方便整合不同项目间的图标集，以下示例作参考：",-1),m=s("h2",{id:"最后",tabindex:"-1"},[l("最后 "),s("a",{class:"header-anchor",href:"#最后","aria-label":'Permalink to "最后"'},"​")],-1),g=s("p",null,[l("油猴在日常非常实用，例如有个叫 "),s("a",{href:"https://greasyfork.org/zh-CN/scripts/438684-pagetual",target:"_blank",rel:"noreferrer"},"东方永页机"),l(" 的油猴脚本，在看小说时或逛论坛时能根据滚轮自动加载下一页，体验非常丝滑。此外，在工作时油猴也能有很好的帮助作用(例如以上的示例)。")],-1);function h(A,D,C,_,v,f){const n=o("Image");return r(),c("div",null,[b,s("p",null,[a(n,{src:t,class:"cursor-pointer"})]),d,s("p",null,[a(n,{src:i,class:"cursor-pointer"})]),E,s("p",null,[a(n,{src:y,class:"cursor-pointer"})]),m,g])}const k=e(u,[["render",h]]);export{w as __pageData,k as default};
