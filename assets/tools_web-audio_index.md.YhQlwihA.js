import{_ as p,E as e,c as o,k as r,J as a,S as s,o as t}from"./chunks/framework.3EKbrk2Y.js";const c="/assets/image-wav.tkj2WXNz.webp",D=JSON.parse('{"title":"基于Web API实现麦克风录音并保存为wav文件","description":"","frontmatter":{"title":"基于Web API实现麦克风录音并保存为wav文件","date":"2023-07-22 08:0000","cover":"./image-crawlee.png"},"headers":[],"relativePath":"tools/web-audio/index.md","filePath":"tools/web-audio/index.md"}'),i={name:"tools/web-audio/index.md"},y=s('<p>最近遇到了一个需求，使用电脑外接的话筒推流发广播，这里面涉及到了 Web RTC 的一些功能以及音频数据的处理。以前做过监听功能，接收 pcm 流并实时播放，因此对音频数据流略有了解，但如何从麦克风接流还不太了解。做了几天，最终完成了，这里简单回顾下并做个小 demo。</p><h2 id="声音的采集" tabindex="-1">声音的采集 <a class="header-anchor" href="#声音的采集" aria-label="Permalink to &quot;声音的采集&quot;">​</a></h2><p>深的概念我们暂不讨论，先来说说：假如我们需要采集声音得到一个音频文件，这中间过程会发生什么呢？大致会如下：</p><ul><li>采集：声音产生震动，录音设备据此采集到波形信号(即模拟信号)</li><li>编码：采集设备将波形转为数值(即数字信号)，常见的方法是 PCM，转换后得到 .pcm 或 .raw 等格式文件</li><li>压缩：PCM 转换的数据体积比较大，不利于传输，通常会再进行压缩得到 .mp3 或 .ogg 等格式文件</li></ul><p>PCM，即脉冲编码调制(Pulse-Code Modulation)，其中有 3 个比较重要的概念：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>采样率</td><td>每秒采集多少个样本，常见的有 44.1KHz 即每秒钟采集 441000 个样本</td></tr><tr><td>位深</td><td>声音的高低，常见的有 16 位</td></tr><tr><td>声道</td><td>常见的有单声道、双声道</td></tr></tbody></table><p>PCM 是一种编码格式，将模拟信号格式转换位数字信号格式，其他的编码格式还有 ACC-LC 、 ACC-LD 等。PCM 转换后的数据，通常称为裸数据(raw)，体积比较大因而会进行压缩。压缩格式也称为容器格式，常见的有 wav、MP3、ogg 等。</p><p>其中，wav 是最简单的，只在 pcm 数据的前面加了 44 位字符(等于没压缩)，贴一张图如下：</p>',8),u=s(`<h2 id="web-audio-api" tabindex="-1">Web Audio API <a class="header-anchor" href="#web-audio-api" aria-label="Permalink to &quot;Web Audio API&quot;">​</a></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API" target="_blank" rel="noreferrer">Web API</a> 是一套关于Web的规范集，而 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Audio_API" target="_blank" rel="noreferrer">Web Audio API</a> 是关于如何控制音频的规范，其允许开发者选择不同的音频源，进行添加特效、可视乎音频等操作。</p><p>在 Web Audio API 中，<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/AudioContext" target="_blank" rel="noreferrer">AudioContext</a> 是处理音频的上下文。里面可以包含多个输入节点，多个中间节点和多个输出节点。每个节点使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/AudioNode/connect" target="_blank" rel="noreferrer">connect</a> 方法连接到下一个节点。示例如下：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#6A737D;">// 创建音频上下文</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> audioContext</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> AudioContext</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 创建输入节点</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> source</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> audioContext.</span><span style="color:#6F42C1;">createBuffSource</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 连接到输出节点</span></span>
<span class="line"><span style="color:#24292E;">source.</span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">(audioContext.destination);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="输入节点" tabindex="-1">输入节点 <a class="header-anchor" href="#输入节点" aria-label="Permalink to &quot;输入节点&quot;">​</a></h2><p>输入，即数据源。可以从页面元素获取，也可以手动生成，常见的方式有如下几种：</p><h3 id="createbuffersource" tabindex="-1">createBufferSource <a class="header-anchor" href="#createbuffersource" aria-label="Permalink to &quot;createBufferSource&quot;">​</a></h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/BaseAudioContext/createBufferSource" target="_blank" rel="noreferrer">createBufferSource</a> 方法，用于创建缓冲区数据源(手动)。其 <code>buff</code> 属性为音频数据(<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/AudioBuffer" target="_blank" rel="noreferrer">AudioBuffer</a> 类型)，该数据可以用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/BaseAudioContext/createBuffer" target="_blank" rel="noreferrer">createBuffer</a> 创建或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/BaseAudioContext/decodeAudioData" target="_blank" rel="noreferrer">decodeAudioData</a> 解码得到。</p><p>AudioBuffer 是一个对象，包含一小段音频数据(缓存形式，因此不应太大，推荐是小于45秒)。每段音频具体点就是：32位(IEEE754格式)、-1 到 1之间的数组。如果AudioBuffer有不同的通道，他们通常被保存在不同的地方。</p><p>手动创建难度比较大，更常见的例子是：用户选择 .mp3 或 .wav 文件后，使用 decodeAudioData 解码后得到 audioBuffer，赋值给 buff 属性播放，示例如下：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">input</span><span style="color:#6F42C1;"> type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;file&quot;</span><span style="color:#6F42C1;"> accept</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;.wav,.mp3&quot;</span><span style="color:#6F42C1;"> @change</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;onFileChange&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#6F42C1;"> setup</span><span style="color:#6F42C1;"> lang</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;ts&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> onFileChange</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">e</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> Event</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> file</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> (e.target </span><span style="color:#D73A49;">as</span><span style="color:#6F42C1;"> HTMLInputElement</span><span style="color:#24292E;">)?.files?.[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">file) {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> reader</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> FileReader</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  reader.</span><span style="color:#6F42C1;">onload</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">e</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    const</span><span style="color:#005CC5;"> buffer</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> e.target?.result </span><span style="color:#D73A49;">as</span><span style="color:#6F42C1;"> ArrayBuffer</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">    const</span><span style="color:#005CC5;"> audioCtx</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> AudioContext</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">    const</span><span style="color:#005CC5;"> source</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> audioCtx.</span><span style="color:#6F42C1;">createBufferSource</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    audioCtx.</span><span style="color:#6F42C1;">decodeAudioData</span><span style="color:#24292E;">(buffer, (</span><span style="color:#E36209;">buffer</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      source.buffer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> buffer;</span></span>
<span class="line"><span style="color:#24292E;">      source.</span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">(audioCtx.destination);</span></span>
<span class="line"><span style="color:#24292E;">      source.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  reader.</span><span style="color:#6F42C1;">readAsArrayBuffer</span><span style="color:#24292E;">(file);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div>`,11),d=s(`<h3 id="createmediaelementsource" tabindex="-1">createMediaElementSource <a class="header-anchor" href="#createmediaelementsource" aria-label="Permalink to &quot;createMediaElementSource&quot;">​</a></h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/AudioContext/createMediaElementSource" target="_blank" rel="noreferrer">createMediaElementSource</a> 方法，创建媒体元素数据源，媒体元素指 <code>&lt;audio&gt;</code> 和 <code>&lt;video&gt;</code> 等HTML元素，示例如下：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#6F42C1;"> class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;flex gap-4 items-center&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">audio</span><span style="color:#6F42C1;"> id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;music&quot;</span><span style="color:#6F42C1;"> src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;./NeverGonnaGiveYouUp.mp3&quot;</span><span style="color:#6F42C1;"> controls</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">audio</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">Button</span><span style="color:#6F42C1;"> @click</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;onClick&quot;</span><span style="color:#24292E;">&gt;播放&lt;/</span><span style="color:#22863A;">Button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#6F42C1;"> setup</span><span style="color:#6F42C1;"> lang</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;ts&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Button } </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &#39;@arco-design/web-vue&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> onClick</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> audio</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;#music&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">as</span><span style="color:#6F42C1;"> HTMLAudioElement</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> audioCtx</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> AudioContext</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> source</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> audioCtx.</span><span style="color:#6F42C1;">createMediaElementSource</span><span style="color:#24292E;">(audio</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  source.</span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">(audioCtx.destination);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div>`,3),b=s(`<h3 id="createmediastreamsource" tabindex="-1">createMediaStreamSource <a class="header-anchor" href="#createmediastreamsource" aria-label="Permalink to &quot;createMediaStreamSource&quot;">​</a></h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/AudioContext/createMediaStreamSource" target="_blank" rel="noreferrer">createMediaStreamSource</a> 方法，用于创建媒体流数据源，媒体流通常指的是从麦克风/话筒获取到的音频流。示例如下：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> audioContext</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> AudioContext</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> destination</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> audioContext.</span><span style="color:#6F42C1;">createMediaStreamDestination</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> mediaRecorder</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> MediaRecorder</span><span style="color:#24292E;">(destination.stream);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">audioArray.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#E36209;">audio</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  let</span><span style="color:#24292E;"> stream </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> audioContext.</span><span style="color:#6F42C1;">createMediaStreamSource</span><span style="color:#24292E;">(audio.</span><span style="color:#6F42C1;">captureStream</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">  stream.</span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">(destination);</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">mediaRecorder.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="中间节点" tabindex="-1">中间节点 <a class="header-anchor" href="#中间节点" aria-label="Permalink to &quot;中间节点&quot;">​</a></h2><p>中间节点，主要对数据源进行加工。例如设置音量，添加背景音，常见的中间节点有如下：</p><h3 id="creategain" tabindex="-1">createGain <a class="header-anchor" href="#creategain" aria-label="Permalink to &quot;createGain&quot;">​</a></h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createGain" target="_blank" rel="noreferrer">createGain</a> 方法，用于创建增益节点(控制音量大小)。</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">button</span><span style="color:#6F42C1;"> class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;mute&quot;</span><span style="color:#24292E;">&gt;Mute button&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> audioCtx</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> AudioContext</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> gainNode</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> audioCtx.</span><span style="color:#6F42C1;">createGain</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> source;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (navigator.mediaDevices.getUserMedia) {</span></span>
<span class="line"><span style="color:#24292E;">  navigator.mediaDevices.</span><span style="color:#6F42C1;">getUserMedia</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      audio: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    (</span><span style="color:#E36209;">stream</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      source </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> audioCtx.</span><span style="color:#6F42C1;">createMediaStreamSource</span><span style="color:#24292E;">(stream);</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`麦克风异常: \${</span><span style="color:#24292E;">err</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;浏览器不支持!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">source.</span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">(gainNode);</span></span>
<span class="line"><span style="color:#24292E;">gainNode.</span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">(audioCtx.destination);</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h2 id="输出节点" tabindex="-1">输出节点 <a class="header-anchor" href="#输出节点" aria-label="Permalink to &quot;输出节点&quot;">​</a></h2><p>通常指的是扬声器，播放处理过的音频。</p>`,10);function m(E,C,A,h,g,f){const l=e("Image"),n=e("demo");return t(),o("div",null,[y,r("p",null,[a(l,{src:c,class:"cursor-pointer"})]),u,a(n,{src:"./demo-createBufferSource.vue"}),d,a(n,{src:"./demo-createMediaElement.vue"}),b])}const v=p(i,[["render",m]]);export{D as __pageData,v as default};
