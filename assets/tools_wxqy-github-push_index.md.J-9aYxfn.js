import{_ as o,E as p,c as t,k as s,J as n,S as l,a as e,o as r}from"./chunks/framework.3EKbrk2Y.js";const c="/assets/image.CmzmHQP5.png",i="/assets/image-1.T4UBatWc.png",h="/assets/image-2.y9lXWqnZ.png",_="/assets/image-3.aLX6E8ne.png",u="/assets/image-4.P4VRcNUc.png",m="/assets/image-5._F5CDCVs.png",b="/assets/image-6.xg8tUJry.png",d="/assets/image-7.XqzG_mnu.png",y="/assets/image-8.py7UncXP.png",g="/assets/image-9.CRA5YVea.png",k="/assets/image-10.W4WpeQLO.png",f="/assets/image-11.WfA4RQy0.png",A="/assets/image-12.ciOjrVqh.png",P="/assets/image-15.m0EBEqGe.png",x="/assets/image-13.5qQwtK3O.png",E="/assets/image-14.gRlcdqQe.png",is=JSON.parse('{"title":"使用企业微信接收青龙面板签到消息或 Github 推送消息通知","description":"","frontmatter":{"title":"使用企业微信接收青龙面板签到消息或 Github 推送消息通知","date":"2024-01-16T01:00:00.000Z"},"headers":[],"relativePath":"tools/wxqy-github-push/index.md","filePath":"tools/wxqy-github-push/index.md"}'),q={name:"tools/wxqy-github-push/index.md"},T=l('<p>最近在用青龙面板搞 B 站自动签到的事，了解到可以使用钉钉/企业微信等工具接收签到结果。于是想着能不能用于接收 Github 的推送通知，试了一番最终也跑通了，这里记录下过程。</p><p>如果要使用微信接收通知，大体有 2 条路：</p><ul><li>一个是使用微信公众号，但普通的公众号没有这个权限，可以使用 PushPlus 这类已有认证公众号的平台进行转发，不可避免的是隐私和费用(免费的体验一般)。</li><li>另一个使用企业微信自建企业，在普通微信上接收企业微信的信息，目前在企业微信创建企业不需要认证，这条路是可行的。下面就用这种办法。</li></ul><p>在企业微信上接收消息也有两种方式：</p><ul><li>企业微信应用：使用类似与公众号，可以发送和接收消息，不过最近使用应用需要实名的域名验证和IP范围，有一小点难度。</li><li>企业微信机器人：其实指的是群聊机器人，在企业微信创建的群聊中可以添加机器人，通过机器人的 webhook 地址发起 POST 请求就可以向群里发消息，用起来非常方便。</li></ul><h2 id="企业微信通知" tabindex="-1">企业微信通知 <a class="header-anchor" href="#企业微信通知" aria-label="Permalink to &quot;企业微信通知&quot;">​</a></h2><p>企业微信应用，类似与公众号，可以发送和接收消息，不过最近使用应用需要实名的域名验证和IP范围，有一小点难度。</p><h3 id="创建企业" tabindex="-1">创建企业 <a class="header-anchor" href="#创建企业" aria-label="Permalink to &quot;创建企业&quot;">​</a></h3><p>打开企业微信的 <a href="https://work.weixin.qq.com/wework_admin/register_wx?from=loginpage" target="_blank" rel="noreferrer">注册页面</a> 进行注册，注意管理员姓名不要乱填，最好填自己名字，不然有验证的话会比较麻烦。</p>',9),w=s("h3",{id:"创建应用",tabindex:"-1"},[e("创建应用 "),s("a",{class:"header-anchor",href:"#创建应用","aria-label":'Permalink to "创建应用"'},"​")],-1),C=s("p",null,[e("打开企业微信的 "),s("a",{href:"https://work.weixin.qq.com/wework_admin/loginpage_wx",target:"_blank",rel:"noreferrer"},"登陆页面"),e("，使用注册时的微信进行扫码登陆。按如下步骤创建一个应用：")],-1),F=s("h3",{id:"添加可信域名",tabindex:"-1"},[e("添加可信域名 "),s("a",{class:"header-anchor",href:"#添加可信域名","aria-label":'Permalink to "添加可信域名"'},"​")],-1),O=s("p",null,"进入创建好的应用，划到底部，按如下步骤添加可行域名并验证：",-1),S=s("h3",{id:"添加可信ip",tabindex:"-1"},[e("添加可信IP "),s("a",{class:"header-anchor",href:"#添加可信ip","aria-label":'Permalink to "添加可信IP"'},"​")],-1),W=s("p",null,"还是刚才的应用管理页面，划到底部，按如下步骤添加可行IP：",-1),I=s("h3",{id:"记录凭证",tabindex:"-1"},[e("记录凭证 "),s("a",{class:"header-anchor",href:"#记录凭证","aria-label":'Permalink to "记录凭证"'},"​")],-1),B=s("p",null,"使用应用发消息需要几个重要的凭证，如下：",-1),V=s("ul",null,[s("li",null,"企业ID")],-1),$=s("ul",null,[s("li",null,"应用的 AgentID 和 Secret，其中 Secret 需要下载企业微信才能接收")],-1),v=s("h3",{id:"使用凭证",tabindex:"-1"},[e("使用凭证 "),s("a",{class:"header-anchor",href:"#使用凭证","aria-label":'Permalink to "使用凭证"'},"​")],-1),G=s("p",null,"如果是自定义发送可翻下官方文档，我这里使用的青龙面板，按如下格式填写即可：",-1),R=s("h3",{id:"接收消息",tabindex:"-1"},[e("接收消息 "),s("a",{class:"header-anchor",href:"#接收消息","aria-label":'Permalink to "接收消息"'},"​")],-1),D=s("p",null,"以下是接收的消息效果：",-1),H=l('<h2 id="企业微信机器人" tabindex="-1">企业微信机器人 <a class="header-anchor" href="#企业微信机器人" aria-label="Permalink to &quot;企业微信机器人&quot;">​</a></h2><p>企业微信机器人，其实指的是群聊机器人，在企业微信创建的群聊中可以添加机器人，向机器人的 webhook 地址发起 POST 请求就可以向群里发消息，用起来非常方便。接下来完成一个 Github 仓库的推送通知。</p><h3 id="下载企业微信" tabindex="-1">下载企业微信 <a class="header-anchor" href="#下载企业微信" aria-label="Permalink to &quot;下载企业微信&quot;">​</a></h3><p>群聊机器人需要 PC 版的企业微信才能操作，打开 <a href="https://work.weixin.qq.com/#indexDownload" target="_blank" rel="noreferrer">下载页面</a> 进行下载安装。</p>',4),N=s("h3",{id:"创建群聊",tabindex:"-1"},[e("创建群聊 "),s("a",{class:"header-anchor",href:"#创建群聊","aria-label":'Permalink to "创建群聊"'},"​")],-1),K=s("p",null,"登陆企业微信，随便创建一个群聊:",-1),U=s("h3",{id:"添加群机器人",tabindex:"-1"},[e("添加群机器人 "),s("a",{class:"header-anchor",href:"#添加群机器人","aria-label":'Permalink to "添加群机器人"'},"​")],-1),Q=s("p",null,"按如下步骤添加一个群聊机器人：",-1),X=s("h3",{id:"记录地址",tabindex:"-1"},[e("记录地址 "),s("a",{class:"header-anchor",href:"#记录地址","aria-label":'Permalink to "记录地址"'},"​")],-1),J=s("p",null,"打开机器人信息页，复制 webhook 地址，后面会用到。",-1),M=s("h3",{id:"添加-action-仓库",tabindex:"-1"},[e("添加 Action 仓库 "),s("a",{class:"header-anchor",href:"#添加-action-仓库","aria-label":'Permalink to "添加 Action 仓库"'},"​")],-1),j=s("p",null,[e("使用 Github Actions 通常会用 Action 进行推送，但通常不能使用非认证的第三方 Action，不过我们可以 fork 一份这样就不会有问题了。这里使用 fork "),s("a",{href:"https://github.com/chf007/action-wechat-work",target:"_blank",rel:"noreferrer"},"WeChat Work for GitHub Actions"),e(" 这个仓库，看下了代码非常容易理解。")],-1),z=l(`<h3 id="添加工作流任务" tabindex="-1">添加工作流任务 <a class="header-anchor" href="#添加工作流任务" aria-label="Permalink to &quot;添加工作流任务&quot;">​</a></h3><p>在需要通知的仓库里，添加具体的工作流任务，以我自己的 starter-vue 为例，修改 .github/workflows/deploy.yaml 文件，如下：</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">自动部署</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">on</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#22863A;">  push</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#22863A;">    branches</span><span style="color:#24292E;">: [ </span><span style="color:#032F62;">master</span><span style="color:#24292E;"> ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#22863A;">jobs</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#22863A;">  send</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#22863A;">    runs-on</span><span style="color:#24292E;">: </span><span style="color:#032F62;">ubuntu-latest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#22863A;">    steps</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">克隆代码</span></span>
<span class="line"><span style="color:#22863A;">        uses</span><span style="color:#24292E;">: </span><span style="color:#032F62;">actions/checkout@v2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">构建消息</span></span>
<span class="line"><span style="color:#22863A;">        id</span><span style="color:#24292E;">: </span><span style="color:#032F62;">exec_cmd</span></span>
<span class="line"><span style="color:#22863A;">        run</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">|</span></span>
<span class="line"><span style="color:#032F62;">          MSG=$(git log --format=%B -n 1 \${{ github.sha }})</span></span>
<span class="line"><span style="color:#032F62;">          echo &quot;msg=$MSG&quot; &gt;&gt; &quot;$GITHUB_OUTPUT&quot;</span></span>
<span class="line"><span style="color:#22863A;">        shell</span><span style="color:#24292E;">: </span><span style="color:#032F62;">bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">推送到企微</span></span>
<span class="line"><span style="color:#22863A;">        uses</span><span style="color:#24292E;">: </span><span style="color:#032F62;">appnify/action-wechat-work@master</span></span>
<span class="line"><span style="color:#22863A;">        env</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#22863A;">          WECHAT_WORK_BOT_WEBHOOK</span><span style="color:#24292E;">: </span><span style="color:#032F62;">\${{secrets.WECHAT_WORK_BOT_WEBHOOK}}</span></span>
<span class="line"><span style="color:#22863A;">        with</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#22863A;">          msgtype</span><span style="color:#24292E;">: </span><span style="color:#032F62;">text</span></span>
<span class="line"><span style="color:#22863A;">          content</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;推送通知</span><span style="color:#005CC5;">\\n\\n</span><span style="color:#032F62;">仓库名称：\${{ github.repository }}</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">提交用户：\${{ github.actor }}</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">提交消息：\${{ steps.exec_cmd.outputs.msg }}</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">提交哈希：\${{ github.sha }}</span><span style="color:#005CC5;">\\n\\n</span><span style="color:#032F62;">提醒：已有提交推送到仓库，请留意构建结果。&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h3 id="添加-webhook-密钥" tabindex="-1">添加 Webhook 密钥 <a class="header-anchor" href="#添加-webhook-密钥" aria-label="Permalink to &quot;添加 Webhook 密钥&quot;">​</a></h3><p>上面的的代码代码中用到 secrets.WECHAT_WORK_BOT_WEBHOOK 这个密钥，里面是我们群聊机器人的 webhook 地址。但这个密钥还没有，接下来到仓库设置里添加这个密钥：</p>`,5),L=s("h3",{id:"推送效果",tabindex:"-1"},[e("推送效果 "),s("a",{class:"header-anchor",href:"#推送效果","aria-label":'Permalink to "推送效果"'},"​")],-1),Z=s("p",null,"以下是文本格式的推送效果(企业微信)，其他效果自行探索，：",-1),Y=s("p",null,"微信效果(如下)，注意：微信不支持 Markdown 格式的消息。",-1),ss=s("h2",{id:"结语",tabindex:"-1"},[e("结语 "),s("a",{class:"header-anchor",href:"#结语","aria-label":'Permalink to "结语"'},"​")],-1),as=s("p",null,"使用下来感觉还是非常不错的，不过网上关于企业微信通知相关的文章并不是很多，可能钉钉/飞书/Telegram用得更多一点吧。如果想要获取天气，新闻之类的消息，配合 serverless/云函数之类的服务会有不错的效果，暂时先到这里，后续有想法再说。",-1);function ns(es,ls,os,ps,ts,rs){const a=p("Image");return r(),t("div",null,[T,s("p",null,[n(a,{src:c,alt:"image",class:"cursor-pointer"})]),w,C,s("p",null,[n(a,{src:i,alt:"image",class:"cursor-pointer"})]),F,O,s("p",null,[n(a,{src:h,alt:"image",class:"cursor-pointer"})]),S,W,s("p",null,[n(a,{src:_,alt:"image",class:"cursor-pointer"})]),I,B,V,s("p",null,[n(a,{src:u,alt:"image",class:"cursor-pointer"})]),$,s("p",null,[n(a,{src:m,alt:"image",class:"cursor-pointer"})]),v,G,s("p",null,[n(a,{src:b,alt:"image",class:"cursor-pointer"})]),R,D,s("p",null,[n(a,{src:d,alt:"image",class:"cursor-pointer"})]),H,s("p",null,[n(a,{src:y,alt:"image",class:"cursor-pointer"})]),N,K,s("p",null,[n(a,{src:g,alt:"image",class:"cursor-pointer"})]),U,Q,s("p",null,[n(a,{src:k,alt:"image",class:"cursor-pointer"})]),X,J,s("p",null,[n(a,{src:f,alt:"image",class:"cursor-pointer"})]),M,j,s("p",null,[n(a,{src:A,alt:"image",class:"cursor-pointer"})]),z,s("p",null,[n(a,{src:P,alt:"image",class:"cursor-pointer"})]),L,Z,s("p",null,[n(a,{src:x,alt:"image",class:"cursor-pointer"})]),Y,s("p",null,[n(a,{src:E,alt:"image",class:"cursor-pointer"})]),ss,as])}const hs=o(q,[["render",ns]]);export{is as __pageData,hs as default};
